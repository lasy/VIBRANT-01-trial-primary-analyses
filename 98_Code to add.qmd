---
title: "New code to be added"
author: Laura Vermeren
format: 
   html:
     page-layout: full
     code-fold: true
     toc: true
     toc-location: left
     toc-depth: 5
     embed-resources: true
execute:
  cache: true
  warning: false
knitr:
  opts_chunk:
    out.width: "100%"
editor: source
---

```{r libraries}
#| warning: false
#| cache: false

library(tidyverse)
library(magrittr)
library(gt)
library(patchwork)
library(SummarizedExperiment)
library(tidySummarizedExperiment)
library(brms)
library(gtsummary)
library(labelled)
library(scales)
# library(gridExtra)
library(ggpubr)
# library(mia) # BiocManager::install("mia")

theme_set(theme_light())
tmp <- fs::dir_map("R", source)
rm(tmp)

```

```{r source-utils}
#| warning: false
#| cache: false
tmp <- fs::dir_map("../VIBRANT-99-utils/R/", source)
rm(tmp)
```


## Load data 

```{r loading-mae}
#| eval: true

mae_file <- 
  fs::dir_ls(str_c(data_dir(), "04 unblinded MAEs/"), regexp = "mae_full_.*\\.rds$") |> 
  sort(decreasing = TRUE) |>
  magrittr::extract(1)

cat(str_c("Loading the RDS file containing the unblinded VIBRANT MAE: /", mae_file |> str_remove(data_dir()), "\n"))

mae <- readRDS(mae_file)

rm(mae_file)

```

## Colonized and still colonized 

Among participants colonized by week 5, how many are still colonized at week 12?

```{r}

# existe déjà 
################################################################################
col_by_week5 <- 
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1500", .feature == "colonized_LBP_by_mg")
  ) |> 
  mutate(LBP_colonization_by_week5 = outcome |> replace_na(FALSE)) 
################################################################################

col_at_week12 <- 
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "2120", .feature == "colonized_LBP_at_mg")
  ) |> 
  mutate(LBP_colonization_at_week12 = outcome |> replace_na(FALSE)) 


col_still_col <- 
  col_by_week5 |> select(pid, site, arm, randomized, ITT, mITT, PP, LBP_colonization_by_week5) |> 
  left_join(
    col_at_week12 |> select(pid, LBP_colonization_at_week12 ),
    by = c("pid")
  )

```

Table of colonization at week 12 among participants colonized by week 5 (by site and arm)

```{r}

summary_table_still_col <-
  col_still_col |> 
  filter(LBP_colonization_by_week5) |>
  group_by(site, arm) |> 
  summarize(
    n = n(),  # total with colonization at week 5
    n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
    .groups = "drop"
  ) |> 
  mutate(
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

table_still_col <- 
  summary_table_still_col |> 
  mutate(
    N_per_site_and_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    site, arm, N_per_site_and_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(site, arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_site_and_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(site, name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


table_still_col |> 
  group_by(site) |> 
  gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm and site", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    # Blinded = "All blinded arms",
    Pl = "Placebo",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```

Overall colonization at week 12 among participants colonized by week 5

```{r}

col_still_col |> 
  filter(LBP_colonization_by_week5) |> 
  summarise(
    n = n(),
    n_success = sum(LBP_colonization_at_week12),
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  ) |> 
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(n, n_success, pct, CI_text) |> 
  gt() |> 
  cols_label(
    n = "N participants \n colonized by week 5",
    n_success = "n (%) participants still colonized at week 12",
    pct = "Percentage",
    CI_text = "95% CI"
  )

```


purgatoire

```{r}
# brouillon 
# problème est que tous les pid sont dupliqué 
# donc on rajoute le summary et on a le même résultat que précédement
# test <- 
#   mae@colData |> as_tibble() |> 
#   select(pid, site, randomized, arm, ITT, mITT, PP) |> 
#   distinct() |> 
#   filter(randomized, mITT) |> 
#   left_join(
#     mae[["col_LBP_mg"]] |> 
#       as_tibble() |> 
#       dplyr::left_join(
#         mae@colData |> as_tibble() |> select(uid, pid, visit_code),
#         by = join_by(.sample == uid)
#       ) |> 
#       dplyr::filter(visit_code %in% c("1500","2120"))
#   )  |> 
#   mutate(
#     LBP_colonization_by_week5 = ifelse(visit_code == "1500" & .feature == "colonized_LBP_by_mg", outcome, FALSE),
#     LBP_colonization_at_week12 = ifelse(visit_code == "2120" & .feature == "colonized_LBP_at_mg", outcome, FALSE)
#   ) |> 
#   group_by(pid) |>
#   summarise(
#     col_by_week5 = any(LBP_colonization_by_week5, na.rm = TRUE),
#     col_by_week12 = any(LBP_colonization_at_week12, na.rm = TRUE),
#     .groups = "drop"
#   )

```


## Applicator staining

### Data

We load data on stained applicators from crf46 and data on returned applicators from crf23. We also need exposures to the study product, so we load the exposures table. Then we create the table `applicator` taht contain only the participants in mITT population.

```{r}

applicator_stained <- 
  metadata(mae)$crf_data_clean$crf46 |> 
  as_tibble() |> 
  select(-dfseq, -vdate_fixed)

applicator_returned <- 
  metadata(mae)$crf_data_clean$crf23 |> 
  as_tibble() |> 
  select(uid, pid, visit_code, study_day, used_applicators, number_applicators) |> 
  group_by(pid)

exposure <- 
  mae@colData |> 
  as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    metadata(mae)$exposures |> 
  as_tibble() |> 
  select(pid, visit_code, study_day, study_product), 
  by = "pid"
  ) |> 
  group_by(pid) |> 
  summarise(
    n_product_doses = sum(study_product |> as.integer(), na.rm = TRUE)
  )

applicator <- 
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT)|> 
  left_join(applicator_returned, by = c("pid")) |> 
  left_join(
    applicator_stained,
    by = c("uid", "pid", "visit_code", "study_day")
  ) |> 
  left_join(exposure, by = "pid")




```

### Plot 

Some participants returned applicators at two different visits. According to the CAPRISA Vulindlela Pharmacy, used and remaining applicators, along with the study product, were given back to participants after the first visit, and they were expected to return all applicators at the second visit. For this reason, when applicators were returned at both visits, we kept only the data from the second visit.

Two participants returned eight applicators. In both cases, comments explain that they had received a spare applicator:

*   Participant 068-20-0425 reported taking the spare applicator out of its wrapping and placing it in the return bag without using or washing any applicators.
*   Participant 068-20-0439 reported inserting the spare applicator on the day of the visit, thinking all applicators had to be used, but also did not wash any of them.

```{r}
#| eval: false
#| fig-height: 9
applicator |> 
  ggplot(aes(x = visit_code, y = pid, fill = number_applicators |> as.factor())) +
  geom_tile() + 
  #scale_fill_discrete(na.translate = FALSE) + 
  scale_fill_manual( 
    name = "Number of applicators \nreturned",
    values = c(
    "3" = "lightblue3", 
    "4" = "lightblue", 
    "5" = "lightblue1", 
    "6" = "lightgreen", 
    "7" = "green3", 
    "8" = "darkgreen"
    ), 
    na.translate = FALSE) +
  theme_minimal()

```


```{r}
#| eval: false 
#| fig-height: 9
applicator  |> 
  ggplot(aes(x = visit_code, y = pid, fill = applicator_stain_positive |> as.factor())) +
  geom_tile() + 
  geom_text(aes(label = total_applicators_stained), color = "black", size = 3) + 
  scale_fill_manual( 
    name = "Number of applicators \nstained positive",
    values = c(
    "3" = "lightblue3", 
    "4" = "lightblue", 
    "5" = "lightblue1", 
    "6" = "lightgreen", 
    "7" = "green3", 
    "8" = "darkgreen"
    ), 
    na.translate = FALSE) +
  theme_minimal() + 
  labs(
    x = "Visit code",
    y = "Participant ID",
    title = "Number of stained applicators (out of total stained)"
  )

```


```{r}
#| fig-height: 9

applicator |> 
  ggplot(aes(x = visit_code, y = pid, fill = number_applicators |> as.factor())) +
  geom_tile() + 
  geom_text(aes(label = applicator_stain_positive), color = "black", size = 3) +   
  scale_fill_manual( 
    name = "Number of applicators \nreturned",
    values = c(
    "3" = "lightblue3", 
    "4" = "lightblue", 
    "5" = "lightblue1", 
    "6" = "lightgreen", 
    "7" = "green3", 
    "8" = "darkgreen"
    ), 
    na.translate = FALSE) +
  theme_minimal() + 
  labs(
    x = "Visit code",
    y = "Participant ID",
    title = "Number of applicator returned (out of number applicator stained positive)"
  )


```

```{r}
#| fig-height: 9
applicator |> 
  ggplot(aes(x = visit_code, y = pid, fill = proportion_positive_applicators)) +
  geom_tile() + 
  geom_text(aes(label = number_applicators), color = "black", size = 3) +
  scale_fill_gradient(
  low = "yellow",  
  high = "lightblue",  
  name = "Proportion of applicators stained positive",
  labels = scales::label_percent(accuracy = 1),
  na.value = "white"
) +
  theme_minimal()

```

```{r}
#| fig-height: 9
applicator |> 
  ggplot() + 
  aes(y=pid, x = n_product_doses, fill = proportion_positive_applicators) + 
  geom_tile() +
  scale_fill_gradient(
  low = "yellow",  
  high = "lightblue",  
  name = "Proportion of applicators stained positive",
  labels = scales::label_percent(accuracy = 1),
  na.value = "grey"
) +
  theme_minimal()

```


### Table

```{r}

applicator <- 
  applicator |>
  group_by(pid) |>
  mutate(
    data_complete = !is.na(number_applicators) | !is.na(applicator_stain_positive)
  ) |>
  arrange(pid, desc(data_complete), desc(visit_code)) |>
  dplyr::slice(1) |> 
  ungroup()

```

```{r}
# applicator |> 
#   ggplot(aes(x = visit_code, y = pid, fill = number_applicators |> as.factor())) +
#   geom_tile() + 
#   geom_text(aes(label = applicator_stain_positive), color = "black", size = 3) +   
#   scale_fill_manual( 
#     name = "Number of applicators \nreturned",
#     values = c(
#     "3" = "lightblue3", 
#     "4" = "lightblue", 
#     "5" = "lightblue1", 
#     "6" = "lightgreen", 
#     "7" = "green3", 
#     "8" = "darkgreen"
#     ), 
#     na.translate = FALSE) +
#   theme_minimal()
```


```{r}

applicator |> 
  group_by(pid) |> 
  summarise(
    used_applicators_returned = ifelse(any(used_applicators == "Yes", na.rm = TRUE), "Yes", "No"),
    applicator_stained = ifelse(any(!is.na(total_applicators_stained)), "Yes", "No"),
    .groups = "drop"
  )|> 
  dplyr::count(used_applicators_returned, applicator_stained)
  

```


```{r}

applicator |> 
  mutate(
    number_applicators = 
      number_applicators |> as.factor() |> fct_expand("Missing") |> replace_na("Missing"),
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  dplyr::count(number_applicators, applicator_stain_positive) |>
  ggplot(aes(x=number_applicators , 
             y=applicator_stain_positive, 
             fill = n)) + 
  geom_tile() +
  geom_text(aes(label = n), size = 3) +
  scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none") +
  xlab("Number of applicators returned") + ylab("Applicator stained positive")
  

```

```{r}



applicator |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive) |>
  ggplot(aes(x=n_product_doses , 
             y=applicator_stain_positive, 
             fill = n)) + 
  geom_tile() +
  geom_text(aes(label = n), size = 3) +
  scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none") +
  xlab("Number of doses taken") +
  ylab("Positive applicator (n)")
```


## Time between final doses and week 2 visit

To compute the time between the last dose taken prior to the in-person visit at week 2, we use information from three sources: crf32 for the time of insertion of the study product, the exposure table for the date of the last dose, and the visits_crfs_merged table for the study day of the week 2 in-person visit.

To better estimate this time interval, we combine the `study_day` (which reflects the calendar day of product use) with `insertion_study_product_time` to account for the time of day the product was inserted. Specifically, we convert the reported insertion window into a fractional day value and add it to the study day, as follows:

*   Before 6am: 0.125
*   Early morning (6–9am): 0.25
*   Late morning (9–12pm): 0.4375
*   Early afternoon (12–3pm): 0.5625
*   Late afternoon (3–6pm): 0.6875
*   Evening (6–9pm): 0.8125
*   Late evening (9pm–midnight): 0.9375

For the week 2 in-person visit, we also assume it occurred during the day (rather than at midnight), so we add 0.5 to the visit's study_day to reflect a likely early afternoon visit time.

```{r}

exposure <- 
  mae@colData |> 
  as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    metadata(mae)$exposures |> 
  as_tibble() |> 
  select(pid, visit_code, study_day, study_product), 
  by = "pid"
  ) |> 
  left_join(
    metadata(mae)$crf_data_clean$crf32 |> 
      as_tibble() |> 
      select(pid, visit_code, insert_study_product_time), 
    by = (c("pid", "visit_code"))) |> 
  dplyr::rename(
    study_day_product = study_day, 
    visit_code_product = visit_code
  ) |> 
  mutate(study_day_product_frac = 
           dplyr::case_when(
             insert_study_product_time == "Before 6am" ~ study_day_product + 0.125,
             insert_study_product_time == "Early morning (6am-9am)" ~ study_day_product + 0.3125,
             insert_study_product_time == "Late morning (9am-12pm)" ~ study_day_product + 0.4375,
             insert_study_product_time == "Early afternoon (12pm-3pm)" ~ study_day_product + 0.5625,
             insert_study_product_time == "Late afternoon (3pm-6pm)" ~ study_day_product + 0.6875,
             insert_study_product_time == "Evening (6pm-9pm)" ~ study_day_product + 0.8125,
             insert_study_product_time == "Late evening (9pm-midnight)" ~ study_day_product + 0.9375,
             TRUE ~ study_day_product
           ))

# study_day visit 2 in person
# ! pid 068100026 appear 2 times ! -> remove using filter(!is.na(study_day_visit2))
visit2_studyday <- 
  metadata(mae)$visits_crfs_merged |> 
  as_tibble() |> 
  select(pid, visit_code, study_day) |> 
  distinct() |> 
  filter(visit_code == "1200") |> 
  dplyr::rename(
    study_day_v2 = study_day
  ) |> 
  dplyr::filter(!is.na(study_day_v2)) |> 
  mutate(
    study_day_v2 = study_day_v2 + 0.5
  )

study_prod_time <- 
  exposure |> 
  left_join(visit2_studyday |> select(-visit_code), by = "pid") |> 
  group_by(pid) |> 
  filter(study_product =="1") |> 
  filter(study_day_product_frac <= study_day_v2) |> 
  arrange(study_day_product_frac) |> 
  slice_tail(n = 1) |>              
  ungroup() 


# filter for participant in LC-106-7 and LC-115 and compute the difference in time
study_prod_time <- 
  study_prod_time |> 
  filter(arm %in% c("LC-106-7", "LC-115")) |> 
  mutate(
    time_between_final_dose_and_v2 = study_day_v2 - study_day_product_frac
  )



```

```{r}
# mean and CI of time_between_final_dose_and_visit2 by arm
study_prod_time |> 
  group_by(arm) |> 
  summarise(
    mean_time = mean(time_between_final_dose_and_v2, na.rm = TRUE),
    median_time = median(time_between_final_dose_and_v2, na.rm = TRUE),
    sd_time = sd(time_between_final_dose_and_v2, na.rm = TRUE),
    n = n(),
    CI = list(DescTools::MeanCI(time_between_final_dose_and_v2, conf.level = 0.95, na.rm = TRUE))
  ) |> 
  mutate(
    CI_text = str_c("(", round(map_dbl(CI, ~ .x[2]), 2), "-", round(map_dbl(CI, ~ .x[3]), 2), ")")
  ) |>
  select(arm,n, median_time, mean_time, sd_time, CI_text)

```

```{r}

study_prod_time |> 
  ggplot() + 
  aes(x = time_between_final_dose_and_v2*24, y = pid) +
  geom_point() + 
  geom_vline(xintercept = c(24, 48, 72, 96), linetype = "dashed", color = "steelblue") +
  scale_x_continuous(
    breaks = seq(0, 24*4, by = 12),  
    name = "Time between final dose and visit 2 (hours)"
  ) +
  facet_grid(site~arm, scales = "free_y", space = "free_y")

```


## Sensitive analyses 
At YY of these visits remote from dosing, where an LBP strain was detected by metagenomics, LBP strains made up > 50% of the community in YY (%), suggesting that if the LBP strains were retained they usually established dominance., 

```{r}

propLBP_week3_5 <- 
  mae[["mg"]] |> 
  as_tibble() |> 
  dplyr::left_join(
    mae@colData |> as_tibble() |> select(uid, pid, arm, mITT, visit_code),
    by = join_by(.sample == uid)
  ) |>
  filter(mITT) |> 
  filter(arm %in% c("LC-106-7", "LC-115")) |> 
  filter(visit_code %in% c("1300", "1400", "1500")) |> 
  filter(!is.na(LBP)) |> 
  group_by(pid, visit_code) |>
  summarise(
    prop_tot_LBP = sum(rel_ab, na.rm = TRUE),
    .groups = "drop"
  ) 

propLBP_week3_5|>
  dplyr::count(prop_tot_LBP > 0)

propLBP_week3_5 |>
  dplyr::count(prop_tot_LBP > 0.5)

```


## Nugent score 

The nugent score can be found in crf14. We are interested in the value of the nugent score at the visit after metroidazole treatment (visit 1100).

```{r}

nugent_score <- 
  metadata(mae)$crf_data_clean$crf14 |> 
  as_tibble() |> 
  select(uid, pid, visit_code, study_day, nugent_total_score) |> 
  filter(visit_code == "1100") |> 
  left_join(mae@colData |> as_tibble() |>  select(pid, site, randomized, arm, ITT, mITT, PP)  |> distinct()) |>
  filter(randomized, mITT) |> 
  group_by(pid) |>
  mutate(
    nugent_positive = ifelse(nugent_total_score >= 7, TRUE, FALSE)
  ) |> 
  ungroup()



#nugent score of active arm

nugent_score |> 
  group_by(arm) |>
  summarise(
    n = n(),
    n_positive = sum(nugent_positive, na.rm = TRUE),
    p = n_positive / n,
    CI = binom::binom.confint(n_positive, n, method = "exact")
  ) |>
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(-CI, -p) |> 
  gt() |> 
  cols_label(
    n = "N participants",
    n_positive = "n (%) participants with nugent score >= 7",
    pct = "Percentage",
    CI_text = "95% CI"
  )

```

```{r}
#| fig-height: 9
nugent_score |> 
  ggplot()+ 
  aes(x = nugent_total_score |> as.factor(), y = pid, fill = nugent_positive |> as.factor()) +
  geom_tile() +
  scale_fill_manual(
    name = "Nugent score >= 7",
    values = c("TRUE" = "lightblue", "FALSE" = "lightgray"),
    na.translate = FALSE
  ) + 
  labs(x = "Nugent score", y = "Participant ID")

```

```{r}

# among the 12 of these people exposed to LBP

#1 : 1-10 of 8,570 rows | 1-10 of 69 columns -> filter LBP -> 1-10 of 165 rows
nugent_score |>
  filter(arm != "Pl") |>
  filter(nugent_positive) |>
  left_join(
    mae[["mg"]] |> as_tibble() |>  # add mg data
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |>
      filter(visit_code == "1200"),
    by = c("pid")
  ) |>
  filter(!is.na(LBP)) |> #only LBP strain
  group_by(pid) |>
  summarise(prop_tot_LBP = sum(rel_ab)) |>
  filter(prop_tot_LBP > 0) 
  


  
```


## Purgatory 

**Time between final doses and week 2 visit**
---
Avant : on prenait la date de la dernière dose prise puis on regardait la différence entre la date de ma visite et cette date (pouvait être positif et négatif)
Après : on prend la date de la dernière dose prise *avant la visite week2* et on regarde la différence entre la date de ma visite et cette date (ne peut plus être positif
---

We take the information from the last dose in the exposure table and add the insertion time from the crf32. 

For the study_day of visit 2 in person, we take the information from the visits_crfs_merged table.

```{r}

exposure <- 
  mae@colData |> 
  as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    metadata(mae)$exposures |> 
  as_tibble() |> 
  select(pid, visit_code, study_day, study_product), 
  by = "pid"
  ) |> 
  left_join(
    metadata(mae)$crf_data_clean$crf32 |> 
      as_tibble() |> 
      select(pid, visit_code, insert_study_product_time), 
    by = (c("pid", "visit_code")))

# last dose 
study_prod_time <- 
  exposure |> 
  group_by(pid) |> 
  arrange(visit_code) |> 
  filter(study_product == 1) |>    
  slice_tail(n = 1) |>              
  ungroup() |> 
  mutate(visit_code = visit_code |> as.character()) |> 
  dplyr::rename(
    study_day_final_dose = study_day
  )

# study_day visit 2 in person
# ! pid 068100026 appear 2 times ! -> remove using filter(!is.na(study_day_visit2))
visit2_studyday <- 
  metadata(mae)$visits_crfs_merged |> 
  as_tibble() |> 
  select(pid, visit_code, study_day) |> 
  distinct() |> 
  filter(visit_code == "1200") |> 
  dplyr::rename(
    study_day_visit2 = study_day
  ) |> 
  dplyr::filter(!is.na(study_day_visit2))

study_prod_time <- 
  study_prod_time |> 
  left_join(visit2_studyday |> select(-visit_code), by = "pid")

# filter for participant in LC-106-7 and LC-115
study_prod_time <- 
  study_prod_time |> 
  filter(arm %in% c("LC-106-7", "LC-115")) |> 
  mutate(
    time_between_final_dose_and_visit2 = study_day_visit2 - study_day_final_dose
  )

# mean and CI of time_between_final_dose_and_visit2 by arm
study_prod_time |> 
  group_by(arm) |> 
  summarise(
    mean_time = mean(time_between_final_dose_and_visit2, na.rm = TRUE),
    median_time = median(time_between_final_dose_and_visit2, na.rm = TRUE),
    sd_time = sd(time_between_final_dose_and_visit2, na.rm = TRUE),
    n = n(),
    CI = list(DescTools::MeanCI(time_between_final_dose_and_visit2, conf.level = 0.95, na.rm = TRUE))
  ) |> 
  mutate(
    CI_text = str_c("(", round(map_dbl(CI, ~ .x[2]), 2), "-", round(map_dbl(CI, ~ .x[3]), 2), ")")
  ) |>
  select(arm,n, median_time, mean_time, sd_time, CI_text)


```

```{r}
#2 : 1-10 of 8,569 rows | 1-6 of 58 columns -> filter LBP -> 1-10 of 165 rows 
nugent_score_positive_pid <- 
  nugent_score|> 
  filter(arm != "Pl") |> 
  filter(nugent_positive) |> 
  pull(pid)

mae[["mg"]] |> 
  as_tibble() |>
  dplyr::left_join(
    mae@colData |> as_tibble() |> select(uid, pid, visit_code),
    by = join_by(.sample == uid)
    )  |> 
  filter(visit_code == "1200") |> 
  filter(pid %in% nugent_score_positive_pid) |> 
  filter(!is.na(LBP))
```

