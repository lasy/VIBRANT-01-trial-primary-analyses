---
title: "Suplementary analyses"
author: Laura Symul, Laura Vermeren, Susan Holmes
format: 
   html:
     page-layout: full
     code-fold: true
     toc: true
     toc-location: left
     toc-depth: 5
     embed-resources: true
execute:
  cache: true
  warning: false
knitr:
  opts_chunk:
    out.width: "100%"
editor: source
---


### Applicator staining

We analyze returned applicators and staining results to assess adherence to study product use.
We use data from `participant_crfs_merged` stored in the `@metadata` slot of the `mae` object, which contains data from CRF23 (returned applicators) and CRF46 (staining results). We also use the `exposures` table to obtain information on study product use.

From these, we create the `applicator` table, which includes only participants from the mITT population.

```{r}

tmp <- 
   metadata(mae)$participant_crfs_merged |> 
   as_tibble() |> 
   select(pid, used_applicators, number_applicators, applicator_stain_positive, applicator_stain_negative, applicator_stain_indeterminant, total_applicators_stained, proportion_positive_applicators, total) |> 
   dplyr::rename(
     returned_used_applicators = used_applicators,
     number_of_returned_applicators = number_applicators
   )

study_product <- 
  mae@colData |> 
  as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    metadata(mae)$exposures,  
    by = "pid"
  ) |>
  group_by(pid) |>
  summarize(
    n_product_doses = sum(study_product |> as.integer(), na.rm = TRUE),
    n_product_doses_PP = sum(study_product_PP, na.rm = TRUE),
    comments_studyproduct = str_c(comments_studyproduct[!is.na(comments_studyproduct)], collapse = "; "),
    .groups = "drop"
  ) 

applicator <- 
  mae@colData |> as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(tmp, by = c("pid")) |>
  left_join(study_product, by = "pid") 


```



We note that two participants returned eight applicators. In both cases, comments explain that they had received a spare applicator:

*   Participant 068-20-0425 reported taking the spare applicator out of its wrapping and placing it in the return bag without using or washing any applicators.

*   Participant 068-20-0439 reported inserting the spare applicator on the day of the visit, thinking all applicators had to be used, but also did not wash any of them.



#### Returned applicator statistics

Here, we want to document the proportions of mITT participants who

- returned any used applicators

- returned their complete set of applicators (*i.e.,* 7 or 8 applicators)


```{r}

applicator <- 
  applicator |> 
  mutate(
    returned_complete_set = (number_of_returned_applicators >= 7),
    return_category = case_when(
      (returned_used_applicators == "Yes") & returned_complete_set ~ "Returned complete set",
      (returned_used_applicators == "Yes") & !returned_complete_set ~ "Returned incomplete set",
      returned_used_applicators == "No" ~ "Did not return applicators",
      TRUE ~ "Missing"
    ) |> fct_infreq()
  ) 

applicator |> 
  dplyr::count(return_category) |> 
  mutate(`%` = round(n / sum(n), 3) * 100) |> 
  gt() |> 
  cols_label(return_category = "")

```

#### Staining statistics

Here, we want to document, for those who returned their complete set of applicators, how many got their full set stained.

```{r}
applicator <- 
  applicator |> 
  mutate(
    staining_done_category = 
      case_when(
        (number_of_returned_applicators == 0) | is.na(number_of_returned_applicators) ~ "No applicators returned",
        is.na(total_applicators_stained) ~ "No staining done",
        total_applicators_stained == number_of_returned_applicators ~ "All returned applicators stained",
        total_applicators_stained < number_of_returned_applicators ~ "Partial staining",
        total_applicators_stained > number_of_returned_applicators ~ "???",
        TRUE ~ "???"
      )
  )

```

```{r}
applicator |> 
  dplyr::count(return_category, staining_done_category) |> 
  group_by(return_category) |>
  mutate(
    `%` = round(n / sum(n), 3) * 100
  ) |>
  gt(row_group_as_column = TRUE)
```


```{r}

applicator |> 
  dplyr::count(return_category, staining_done_category) |> 
  group_by(return_category) |>
  mutate(
    `%` = round(n / sum(n), 3) * 100
  ) |>
  gt(row_group_as_column = TRUE)

```

#### Positive staining statistics

Here, we document, for the mITT participants who returned their complete set and got all of their applicators stained, the number of positively stained applicators.


```{r}

applicator |> 
  mutate(
    positive_staining_category = 
      ifelse(
      applicator_stain_positive == total_applicators_stained,
      "All stained applicators are positive",
      "Some stained applicators are not positive"
      )
  ) |> 
  dplyr::count(return_category, staining_done_category, positive_staining_category) |> 
  group_by(return_category, staining_done_category) |> 
  mutate(`%` = round(n / sum(n), 3) * 100) |>
  gt(row_group_as_column = TRUE) |>
  cols_label(
    positive_staining_category = "Staining result"
  )

```





```{r}

applicator |> 
  filter(
    return_category == "Returned complete set",
    staining_done_category == "All returned applicators stained"
  ) |> 
  dplyr::count(
    return_category,
    proportion_positive_applicators, 
    str_c(100*proportion_positive_applicators, "%")
  ) |> 
  mutate(`%` = round(n / sum(n), 3) * 100) |>
  select(-proportion_positive_applicators) |> 
  group_by(return_category) |> 
  gt(row_group_as_column = TRUE) |> 
  cols_label(
    `str_c(100 * proportion_positive_applicators, "%")` = "% of positive applicators"
  )
  
  
```


```{r}

applicator |> 
  filter(
    return_category == "Returned complete set",
    staining_done_category == "All returned applicators stained"
  ) |> 
  mutate(
    number_of_non_positive_applicators = 
      total_applicators_stained - applicator_stain_positive
  ) |> 
  dplyr::count(
    return_category, number_of_non_positive_applicators
  ) |> 
  mutate(`%` = round(n / sum(n), 3) * 100) |>
  group_by(return_category) |> 
  gt(row_group_as_column = TRUE) |> 
  cols_label(
    `number_of_non_positive_applicators` = "n non-positive"
  )
  
  
```

#### Comparison with declared number of doses taken

```{r}

applicator |> 
  filter(
    return_category == "Returned complete set",
    staining_done_category == "All returned applicators stained"
  ) |>
  mutate(
    applicator_stain_positive_fct = applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing"),
    n_product_doses_fct = n_product_doses |> as.factor()
  ) |>
  dplyr::count(
    n_product_doses, n_product_doses_fct, 
    applicator_stain_positive, applicator_stain_positive_fct
    ) |>
  mutate(
    label = str_c(n, " (", round(100 * n / sum(n)), "%)") 
  ) |> 
  ggplot() + 
  aes(
    x = n_product_doses_fct , 
    y = applicator_stain_positive_fct, 
    fill = applicator_stain_positive >= n_product_doses,
    alpha = n
  ) +
  geom_tile() +
  geom_label(aes(label = label), size = 3) +
  scale_fill_manual(na.value = "gray70", values = c("tomato", "steelblue2")) +
  # scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none", alpha = "none") +
  xlab("Number of doses taken (self-report)") +
  ylab("Number of positive applicators") +
  labs(
    caption = "Participants who returned their complete set of applicators were included in this analysis"
  ) 


```



### Interval between last dose and week 2 clinic visit in active arms (LC-106-7, LC-115)

We document the time between the last dose taken prior to the in-person visit at week 2 and the swab collected at that visit. This is relevant because the primary outcome is detection of the LBP strain at the week 2 visit, and the time since last dose may influence the likelihood of detection.

Information on the self-reported time of last study product use comes from `exposures`, while the study day of the week 2 in-person visit is taken from `visits_crfs_merged.`

We define the following categories for the timing of the last study product use:
-   "same day": last dose taken on the same day as the visit (before 6 p.m.)
-   "day before": last dose taken the day before the visit
-   "more than 1 day": last dose taken more than one day before the visit


```{r}
#| eval: true


study_product <-
  mae@colData |>
  as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(
    metadata(mae)$exposures |> select(pid, visit_code, study_product),
  by = "pid"
  ) |>
  left_join(
    metadata(mae)$visits_crfs_merged |> as_tibble() |> select(pid, visit_code, study_day, insert_study_product_time),
    by = (c("pid", "visit_code"))) |>
  dplyr::rename(
    study_day_product = study_day,
    visit_code_product = visit_code
  ) 


# study_day visit 2 in person
# ! pid 068100026 appear 2 times ! -> remove using filter(!is.na(study_day_visit2))
visit2_studyday <- 
  metadata(mae)$visits_crfs_merged |> 
  as_tibble() |> 
  select(pid, visit_code, study_day) |> 
  distinct() |> 
  filter(visit_code == "1200") |> 
  dplyr::rename(
    study_day_v2 = study_day
  ) |> 
  dplyr::filter(!is.na(study_day_v2))
  
study_prod_time <- 
  study_product |> 
  left_join(visit2_studyday |> select(-visit_code), by = "pid") |> 
  filter(arm!="Pl") |> 
  group_by(pid) |> 
  filter(study_product =="1") |> 
  filter(study_day_product <= study_day_v2) |>  # only consider doses taken before v2
  filter(!((study_day_product == study_day_v2) & (insert_study_product_time %in% c("Late evening (9pm-midnight)", "Evening (6pm-9pm)")))) |> 
  arrange(study_day_product) |> 
  slice_tail(n = 1) |>              
  ungroup() 

# create category 
study_prod_time <- 
  study_prod_time |> 
  mutate(last_dose = case_when(
    study_day_product == study_day_v2 ~ "same day", 
    study_day_product == study_day_v2-1 ~ "day before", 
    study_day_product < study_day_v2-1~ "more than one day"
  ), 
  last_dose = factor(last_dose, levels = c("same day", "day before", "more than one day")))


```

Table

```{r}

study_prod_time |> 
  dplyr::count(last_dose) |> 
  gt()

```

```{r}

study_prod_time |> 
  group_by(site, arm, last_dose) |> 
  summarize(
    n = n(),  
    .groups = "drop"
  ) |> 
  ungroup() |> 
  pivot_wider(
    id_cols = c(site, last_dose), 
    names_from = arm,
    values_from = n, values_fill = 0
  ) |> 
  group_by(site) |> 
  gt()
```


### Dominance of LBP strains at visits remote from dosing 

To assess whether colonization typically reflected dominance, we examined the composition of samples from participants in active arms who achieved the primary outcome at visits conducted after product use (weeks 3–5 for LC-106-7 and LC-115; weeks 2–5 for LC-106-o and LC-106-3). 

For each colonized sample, we calculated the total relative abundance of LBP strains based on metagenomic data. We then determined the proportion of samples in which LBP strains accounted for at least 50% of the community.


```{r}

col_at <- 
  mae@colData |> as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT, arm != "Pl") |>
  left_join(
    mae[["col_LBP_mg"]] |>
      as_tibble() |>
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      )
  ) |>
  dplyr::filter(
    .feature == "colonized_LBP_at_mg" &
      (arm %in% c("LC-106-7", "LC-115") & visit_code %in% c("1300", "1400", "1500") |
       arm %in% c("LC-106-o", "LC-106-3") & visit_code %in% c("1200", "1300", "1400", "1500")
      )
  ) |>
  filter(outcome) # only primary outcome achieved 

col_at |> 
  left_join(mae[["mg"]] |> as_tibble(), by = ".sample") |> 
  filter(!is.na(LBP)) |> # only LBP strain
  group_by(.sample) |> 
  summarise(
    prop_tot_LBP = sum(rel_ab, na.rm = TRUE),
    .groups = "drop"
  ) |> 
  dplyr::count(prop_tot_LBP >= 0.5) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() 

  

```

```{r}

# old

# propLBP_week3_5 <- 
#   mae[["mg"]] |> 
#   as_tibble() |> 
#   dplyr::left_join(
#     mae@colData |> as_tibble() |> select(uid, pid, arm, mITT, visit_code),
#     by = join_by(.sample == uid)
#   ) |>
#   filter(mITT) |> 
#   filter(arm %in% c("LC-106-7", "LC-115")) |> 
#   filter(visit_code %in% c("1300", "1400", "1500")) |> 
#   filter(!is.na(LBP)) |> 
#   group_by(pid, visit_code) |>
#   summarise(
#     prop_tot_LBP = sum(rel_ab, na.rm = TRUE),
#     .groups = "drop"
#   ) 
# 
# propLBP_week3_5|>
#   dplyr::count(prop_tot_LBP > 0)
# 
# propLBP_week3_5 |>
#   dplyr::count(prop_tot_LBP > 0.5)

```


### LBP colonization in participants with BV post-MTZ

We assessed treatment response by Nugent score at the first visit following oral metronidazole treatment (visit 1100). Nugent scores were extracted from `visits_crfs_merged` and a binary variable was created to classify participants as BV positive (nugent_total_score ≥ 7) or BV negative (< 7). 

We then estimated the number and proportion of participants who remained BV positive post-metronidazole, overall and by treatment arm.



```{r}
# nugent score for all visits 

nugent_score <- 
  mae@colData |> 
  as_tibble() |> 
  select(uid, pid, visit_code, study_day, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    metadata(mae)$visits_crfs_merged |> 
      as_tibble() |> 
      select(pid, visit_code, nugent_total_score),
    by = c("pid", "visit_code")
  ) |> 
  # some pid x visit are duplicate but there is no data for the nugent score, so we remove the duplicate visit with no data for nugent score
  group_by(pid, visit_code) |> 
  arrange(is.na(nugent_total_score)) |>  
  dplyr::slice(1) |>  
  ungroup() |>
  group_by(visit_code) |> 
  mutate(any_Nugent = any(!is.na(nugent_total_score))) |> 
  ungroup() |> 
  filter(any_Nugent) |> 
  group_by(pid) |>
  mutate(
    active_arm = arm != "Pl",
    nugent_positive = nugent_total_score >= 7
  ) |> 
  ungroup()



```

```{r}
#| fig-height: 6
#| fig-width: 8

nugent_score |> 
  ggplot()+ 
  aes(x = visit_code, y = pid, fill = nugent_total_score) +
  geom_tile() +
  scale_fill_gradient(
    name = "Nugent score",
    low = "lightblue1", high = "red3"
  ) + 
  labs(x = "Visit Code", y = "Participant ID") + 
  theme(axis.text.y = element_text(size = 4))


```


```{r}

nugent_score |>
  filter(visit_code == "1100") |> 
  dplyr::count(nugent_positive) |> 
  gt(caption = "Number of mITT participant with BV (nugent_positive == TRUE) post-MTZ (visit 1100)")

```

```{r}

nugent_score |>
  filter(visit_code == "1100") |> 
  dplyr::count(active_arm, nugent_positive) |> 
  gt(caption = "Number of mITT participant with BV (nugent_positive == TRUE) post-MTZ (visit 1100) by active arm")

```




At visit 1100, among participants with BV who were exposed to the LBP (i.e., in the active arm), 5 participants had a detectable LBP strain identified after treatment by metagenomics.


```{r}

# among the 12 of these people exposed to LBP

tmp <- 
  nugent_score |>
  filter(visit_code == "1100") |> 
  filter(active_arm) |>
  # filter(nugent_positive | is.na(nugent_positive)) |> #  
  left_join(
    # add mg data to see how many had detectable LBP strain post-MTZ
    mae[["mg"]] |> as_tibble() |>  # add mg data
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |>
      filter(visit_code == "1200", !poor_quality_mg_data)|>
      filter(!is.na(LBP)) |> #only LBP strain
      group_by(pid) |>
      summarise(prop_tot_LBP = sum(rel_ab)) |>
      arrange(prop_tot_LBP |> desc()) |> 
      mutate(LBP_detected_post_INT = prop_tot_LBP >= 0.05),
    by = c("pid")
  )  

tmp |> 
  dplyr::count(nugent_positive, LBP_detected_post_INT) |> 
  gt(caption = "Number of mITT participant in one of the active arms with BV diagnosis post-MTZ (visit 1100) and LBP detection (>= 5% total LBP rel. ab) post-INT (visit 1200)")
  
```



### rBV by colonization status

In this section, we are investigating whether LBP colonization is protective of rBV.

We only include participants who were BV-cured post-MTZ, then count the number and proportions of participants who had rBV among those who met the primary outcome and those who did not.


```{r}


rBV_stats <- 
  # we first define for each mITT participant whether they were BV-cured or not post-MTZ by Nugent
  nugent_score |> 
  filter(visit_code == "1100", mITT) |> 
  select(uid, pid, visit_code, site, mITT, active_arm, arm, nugent_total_score) |> 
  mutate(BV_cure_post_MTZ = nugent_total_score < 7) |> 
  # we then specify for each of these participants whether they met the criteria for the primary endpoint of LBP colonization by week 5
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1500", .feature == "colonized_LBP_by_mg") |> 
      mutate(LBP_colonization_by_week5 = outcome |> replace_na(FALSE)) |> 
      select(pid, LBP_colonization_by_week5),
    by = join_by(pid)
  ) |> 
  # we next check who had BV (or rBV) by week 12
  left_join(
    nugent_score |> 
      select(pid, visit_code, nugent_positive) |> 
      filter(as.numeric(visit_code) > 1100, as.numeric(visit_code) <= 2120) |> 
      group_by(pid) |> 
      summarize(
        BV_by_week12 = any(nugent_positive, na.rm = TRUE),
        BV_after_week5 = any(nugent_positive & as.numeric(visit_code) > 1500, na.rm = TRUE), # any BV after week 5
        ),
    by = join_by(pid)
  ) |> 
  mutate(
    rBV_by_week12 = BV_by_week12 & BV_cure_post_MTZ # rBV if BV by week 12 and cured post-MTZ
  )
  
  
rBV_stats |> 
  filter(active_arm) |> 
  dplyr::count(active_arm, BV_cure_post_MTZ, LBP_colonization_by_week5, BV_by_week12)

```

```{r}

rBV_stats |> 
  filter(active_arm, BV_cure_post_MTZ) |> 
  dplyr::count(LBP_colonization_by_week5, BV_by_week12) |> 
  group_by(LBP_colonization_by_week5) |> 
  mutate(
    N = sum(n),
    `%` = round(n / N, 3) * 100,
    CI = binom::binom.confint(n, N, method = "exact"),
    `95% CI` = str_c(round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%")
  ) |> 
  select(-CI)

```




```{r}


rBV_stats <- 
  # we first define for each mITT participant whether they were BV-cured or not post-MTZ by Nugent
  nugent_score |> 
  select(-any_Nugent, -nugent_positive) |> 
  filter(visit_code == "1100", mITT) |> 
  mutate(BV_cure_post_MTZ = nugent_total_score < 7) |> 
  # we then specify for each of these participants whether they met the criteria for the primary endpoint of LBP colonization by week 5
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1500", .feature == "colonized_LBP_by_mg") |> 
      mutate(LBP_colonization_by_week5 = outcome |> replace_na(FALSE)) |> 
      select(pid, LBP_colonization_by_week5),
    by = join_by(pid)
  ) |> 
  # we next check who had BV (or rBV) by week 12
  left_join(
    nugent_score |> 
      select(pid, visit_code, nugent_positive) |> 
      filter(as.numeric(visit_code) > 1100, as.numeric(visit_code) <= 2120) |> 
      group_by(pid) |> 
      summarize(
        BV_by_week12 = any(nugent_positive, na.rm = TRUE),
        BV_after_week5 = any(nugent_positive & as.numeric(visit_code) > 1500, na.rm = TRUE), # any BV after week 5
        ),
    by = join_by(pid)
  ) |> 
  mutate(
    rBV_by_week12 = BV_by_week12 & BV_cure_post_MTZ, # rBV if BV by week 12 and cured post-MTZ
  )
  
  
rBV_stats |> filter(active_arm) |> dplyr::count(active_arm, LBP_colonization_by_week5, BV_after_week5)

```




```{r}
col_by_week5 <- 
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1500", .feature == "colonized_LBP_by_mg")
  ) |> 
  mutate(LBP_colonization_by_week5 = outcome |> replace_na(FALSE)) 


nugent_score |> 
  left_join(col_by_week5 |> select(pid, LBP_colonization_by_week5), 
            by = "pid") |> 
  arrange(pid, visit_code) |>
  group_by(pid, active_arm) |>
  summarise(
    LBP_colonization_by_week5 = any(LBP_colonization_by_week5, na.rm = TRUE),
    BV_recurrence = {
      cured <- cumsum(!nugent_positive & !is.na(nugent_positive)) > 0
      any(nugent_positive & cured, na.rm = TRUE)
    },
    .groups = "drop"
  ) |> 
  dplyr::count(active_arm, LBP_colonization_by_week5, BV_recurrence)


```


```{r}

nugent_score |> 
  filter(visit_code == "1500") |> 
  group_by(active_arm) |> 
  summarise(
    n = n(),
    n_positive = sum(nugent_positive, na.rm = TRUE),
    p = n_positive / n,
    CI = binom::binom.confint(n_positive, n, method = "exact")
  ) |>
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(-CI, -p) |> 
  gt() |> 
  tab_header(
    title = "Proportion of Participants with Nugent Score ≥ 7 at Visit 1500 (week 5)"
  ) |> 
  cols_label(
    n = "N participants",
    n_positive = "n (%) participants with nugent score >= 7",
    pct = "Percentage",
    CI_text = "95% CI"
  )
  
  nugent_score |> 
  filter(visit_code == "2120") |> 
  group_by(active_arm) |> 
  summarise(
    n = n(),
    n_positive = sum(nugent_positive, na.rm = TRUE),
    p = n_positive / n,
    CI = binom::binom.confint(n_positive, n, method = "exact")
  ) |>
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(-CI, -p) |> 
  gt() |> 
  tab_header(
    title = "Proportion of Participants with Nugent Score ≥ 7 at Visit 2120 (week12)"
  ) |> 
  cols_label(
    n = "N participants",
    n_positive = "n (%) participants with nugent score >= 7",
    pct = "Percentage",
    CI_text = "95% CI"
  )
  
  
  
```



```{r}

nugent_score |> 
  filter(visit_code == "2120") |> 
  left_join(col_by_week5 |> select(pid, LBP_colonization_by_week5), by="pid") |> 
  group_by(LBP_colonization_by_week5) |> 
  summarise(
    n = n(),
    n_positive = sum(nugent_positive, na.rm = TRUE),
    p = n_positive / n,
    CI = binom::binom.confint(n_positive, n, method = "exact")
  ) |>
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(-CI, -p) |> 
  gt() |> 
  tab_header(
    title = "Proportion of Participants with Nugent Score ≥ 7 at Visit 2120 (week12)"
  ) |> 
  cols_label(
    n = "N participants",
    n_positive = "n (%) participants with nugent score >= 7",
    pct = "Percentage",
    CI_text = "95% CI"
  )
    
```


### LBP Colonization dominance

We first assessed whether LBP strains, when detected by metagenomic sequencing, typically established dominance in the vaginal microbiota. For each colonized sample, L. crispatus relative abundance was calculated, and dominance was defined as L. crispatus representing more than 50% of the total community. 

We then investigated whether dominance by LBP strains was associated with a reduced risk of recurrent BV. Colonization outcomes were linked to Nugent scores collected at follow-up visits, and we compared the prevalence of BV (Nugent ≥ 7) among participants with or without LBP dominance at week 5. Results suggest that participants who achieved LBP strain dominance were less likely to experience recurrent BV.


```{r}

rel_abs <- 
  mae[["mg"]] |> 
  as_tibble() |> 
  filter(!poor_quality_mg_data) |> 
  left_join(
    mae |> colData() |> as_tibble(), 
    by = join_by(uid)
  ) |>
  filter(randomized, mITT)

rel_abs |> 
  group_by(.sample) |> 
  summarise(
    detected = any(!is.na(LBP) & rel_ab > 0, na.rm = TRUE),
    crispatus_abundance = sum(rel_ab[species == "crispatus"], na.rm = TRUE), 
    crispatus_dominance = ifelse(crispatus_abundance > 0.5, TRUE, FALSE), 
    .groups = "drop"
  ) |> 
  filter(detected) |> 
  dplyr::count(crispatus_dominance, name = "n") |> 
  mutate(
    crispatus_dominance = if_else(crispatus_dominance, "Yes", "No"),
    total = sum(n),
    pct = round(100 * n / total, 1),
    CI = binom::binom.confint(n, total, method = "exact"),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(crispatus_dominance, n, pct, CI_text) |> 
  gt() |> 
  tab_header(
    title = md("Dominance of *L. crispatus* when LBP strains are detected")
  ) |> 
  cols_label(
    crispatus_dominance = "L. crispatus dominance",
    n = "N samples with LBP detected",
    pct = "Percentage",
    CI_text = "95% CI"
  )

```


```{r}
#| fig-height: 6
#| fig-width: 8

tmp <- 
  rel_abs |> 
  group_by(.sample) |> 
  summarise(
    detected = any(!is.na(LBP) & rel_ab > 0, na.rm = TRUE),
    crispatus_abundance = sum(rel_ab[species == "crispatus"], na.rm = TRUE), 
    LBP_abundance = sum(rel_ab[!is.na(LBP)], na.rm = TRUE),
    LBP_dominance = ifelse(LBP_abundance>0.5, TRUE, FALSE), 
    crispatus_dominance = ifelse(crispatus_abundance>0.5, TRUE, FALSE), 
    .groups = "drop"
  ) |> 
  left_join(nugent_score |> 
              select(uid, pid, visit_code, nugent_total_score, nugent_positive), 
            by = c(".sample"="uid")) 

tmp |>  
  filter(!is.na(visit_code)) |> 
  ggplot() + 
  aes(x=visit_code, y = pid, 
      shape = nugent_positive |> as.character(), 
      col = LBP_dominance |> as.character()) + 
  geom_point() + 
  scale_shape_manual(
    name = "Nugent Postive", 
    values = c("TRUE" = 16, "FALSE" = 1)
  ) + 
  scale_color_manual(
    name = "LPB Dominance", 
    values = c("TRUE" = "green3", "FALSE" = "orchid2" )
  ) + 
  labs(x = "Visit code", y = "Pid") + 
  theme(axis.text.y = element_text(size = 4))
  
```

```{r}
tmp |> 
  filter(!is.na(LBP_dominance), !is.na(nugent_positive)) |> 
  filter(visit_code == "1500") |> 
  dplyr::count(LBP_dominance, nugent_positive) |> 
  group_by(LBP_dominance) |> 
  mutate(
    pct = round(100 * n / sum(n), 1)
  ) |> 
  ungroup() |> 
  gt()
```

### LBP detectable at week 12

To evaluate the durability of colonization, we assessed the presence of LBP strains at the week 12 visit (visit 2120) among participants in the active arms. Detection was defined by metagenomic sequencing as the presence of any LBP strain with non-zero relative abundance. 


```{r}
rel_abs |> 
  filter(visit_code == "2120") |> 
  group_by(.sample) |> 
  summarise(detected = any(!is.na(LBP) & rel_ab > 0, na.rm = TRUE)) |> 
  ungroup() |> 
  dplyr::count(detected) |>
  mutate(
    pct = round(100 * n / sum(n), 1)
  ) |> 
  gt()
  
```


### LBP detection at week 3 and 12 by qPCR

As a complementary and more sensitive assay, we assessed LBP strain detection by qPCR. Detection was defined as the concurrent observation of Cq values for at least two LBP strains at the same visit.


```{r}

detected_at_week2_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1200", .feature == "LBP_detected_at_qpcr")
  ) |> 
  mutate(LBP_detected_at_week2 = outcome |> replace_na(FALSE)) 

```

```{r}

detected_at_week2_qPCR |> 
  filter(arm != "Pl") |> 
  dplyr::count(LBP_detected_at_week2) |> 
  gt()

```

```{r}

detected_at_week12_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "2120", .feature == "LBP_detected_at_qpcr")
  ) |> 
  mutate(LBP_detected_at_week12 = outcome |> replace_na(FALSE)) 

```

```{r}

detected_at_week12_qPCR |> 
  filter(arm != "Pl") |> 
  dplyr::count(LBP_detected_at_week12) |> 
  gt()

```


### LBP detection week 3 (1300) and week 4_12 - qPCR

LBP detection was assessed by qPCR, defined as the presence of Cq values for at least two LBP strains at the same visit. We computed the proportion of participants with detectable LBP strains at week 3 (visit 1300, one week after the end of dosing) and at week 9 (visit 1900, after 7 weeks off product), both overall and excluding placebo participants.


```{r}

# one week after LBP = 1300

detected_at_week3_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1300", .feature == "LBP_detected_at_qpcr")
  ) |> 
  mutate(LBP_detected_at_week3 = outcome |> replace_na(FALSE)) 

detected_at_week3_qPCR |> 
  filter(arm != "Pl") |> 
  dplyr::count(LBP_detected_at_week3) |> 
  mutate(p = n/sum(n) * 100) |> 
  gt(caption = "Without placebo")

detected_at_week3_qPCR |> 
  dplyr::count(LBP_detected_at_week3) |>
  mutate(p = n/sum(n) * 100) |> 
  gt(caption = "With placebo")



```

```{r}

detected_at_week9_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1900", .feature == "LBP_detected_at_qpcr")
  ) |> 
  mutate(LBP_detected_at_week9 = outcome |> replace_na(FALSE)) 

detected_at_week9_qPCR |> 
  filter(arm != "Pl") |> 
  dplyr::count(LBP_detected_at_week9) |> 
  mutate(p = n/sum(n) * 100) |> 
  gt(caption = "Without placebo")

detected_at_week9_qPCR |> 
  dplyr::count(LBP_detected_at_week9) |> 
  mutate(p = n/sum(n) * 100) |> 
  gt(caption = "With placebo")
```





