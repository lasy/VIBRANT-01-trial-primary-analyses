---
title: "Suplementary analyses"
author: Laura Symul, Laura Vermeren, Susan Holmes
format: 
   html:
     page-layout: full
     code-fold: true
     toc: true
     toc-location: left
     toc-depth: 5
     embed-resources: true
execute:
  cache: true
  warning: false
knitr:
  opts_chunk:
    out.width: "100%"
editor: source
---


### Long terme colonization 

"Among people with detection of the LBP strains during the first 5 weeks, approximately 40-60% still had detection at week 12 (Figure 3b), demonstrating prolonged durability despite a relatively short initial dosing."

Among participants colonized by week 5, how many are still colonized at week 12?

```{r}

# existe déjà 

col_by_week5 <- 
  mae@colData |> as_tibble() |> 
  dplyr::select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> dplyr::select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1500", .feature == "colonized_LBP_by_mg")
  ) |> 
  mutate(LBP_colonization_by_week5 = outcome |> replace_na(FALSE)) 


col_at_week12 <- 
  mae@colData |> as_tibble() |> 
  dplyr::select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> dplyr::select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "2120", .feature == "colonized_LBP_at_mg")
  ) |> 
  mutate(LBP_colonization_at_week12 = outcome |> replace_na(FALSE)) 


col_still_col <- 
  col_by_week5 |> 
  dplyr::select(pid, site, arm, randomized, ITT, mITT, PP, LBP_colonization_by_week5) |> 
  left_join(
    col_at_week12 |> dplyr::select(pid, LBP_colonization_at_week12 ),
    by = c("pid")
  )

```



```{r}

summary_col_still_col <-
  bind_rows(
    # by site and arms
    col_still_col |> 
      filter(LBP_colonization_by_week5) |>
      group_by(site, arm) |> 
      summarize(
        n = n(),  # total with colonization at week 5
        n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
        .groups = "drop"
      ),
    # combining sites, by arm
    col_still_col |> 
      filter(LBP_colonization_by_week5) |>
      group_by(arm) |> 
      summarize(
        n = n(),  # total with colonization at week 5
        n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
        .groups = "drop"
      ) |> 
      mutate(site = "CAP & MGH")
  ) |> 
  mutate(
    site = site |> fct_inorder(),
    arm = arm |> fct_expand("All arms", "All active arms")
    )

summary_col_still_col <- 
  summary_col_still_col |> 
  bind_rows(
    # overall by site, all arms
    summary_col_still_col |> 
      group_by(site) |> 
      summarize(
        n = sum(n),  # total with colonization at week 5
        n_success = sum(n_success),  # still colonized at week 12
        .groups = "drop"
      ) |> 
      mutate(arm = "All arms" |> factor(levels = summary_col_still_col$arm |> levels())),
    # overall by site, all active arms
    summary_col_still_col |>
      filter(arm != "Pl") |>
      group_by(site) |> 
      summarize(
        n = sum(n),  # total with colonization at week 5
        n_success = sum(n_success),  # still colonized at week 12
        .groups = "drop"
      )  |> 
      mutate(arm = "All active arms" |> factor(levels = summary_col_still_col$arm |> levels()))
  )

summary_col_still_col <- 
  summary_col_still_col |> 
  mutate(
    p_col_stil_col = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

```


```{r}

table_still_col <- 
  summary_col_still_col |> 
  mutate(
    N_per_site_and_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p_col_stil_col * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    site, arm, N_per_site_and_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(site, arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_site_and_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |>
  arrange(arm) |> 
  pivot_wider(
    id_cols = c(site, name), 
    names_from = arm,
    values_from = value, values_fill = ""
    ) |> 
  arrange(site)

```

```{r}

table_still_col |> 
  group_by(site) |> 
  gt(
    caption = "Colonization at week 12 among participants colonized by week 5 by arm", 
    row_group_as_column = TRUE
    ) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_align(
    align = "center", 
    columns = c(Pl, `LC-106-7`, `LC-106-3`, `LC-106-o`, `LC-115`, `All arms`, `All active arms`)
  ) |> 
  cols_label(
    name = "",
    Pl = "Placebo",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    `All active arms` = "All active<br>arms",
    .fn = md
  )

```




Plot (Figure 3b)

```{r}
#| fig-width: 6
#| fig-height: 4

g_long_terme_col <- 
  summary_col_still_col |> 
  filter(!(arm %in% c("Pl", "All arms"))) |> 
  arrange(arm) |> 
  mutate(arm = arm |> str_replace_all(" ", "\n") |> fct_inorder()) |> 
  ggplot() +
  aes(x = arm, y = p_col_stil_col, col = site) +
  geom_linerange(
    aes(ymin = CI$lower, ymax = CI$upper), 
    linewidth = 1.5, alpha = 0.5, lineend = "round",
    position = position_dodge(width = 0.5)
    ) +
  geom_point(position = position_dodge(width = 0.5), size = 3) +
  scale_color_manual("Study site", values = c(site_colors, c("CAP & MGH" = "gray30"))) +
  xlab("") + 
  scale_y_continuous(
    name = "% participants colonized by week 5\nwith LBP strain detected at week 12",
    labels = scales::percent_format(accuracy = 1)
  ) +
  theme(
    panel.grid.major.x = element_blank()
    # axis.text.x = element_text(angle = 45, hjust = 1)
  )

g_long_terme_col

```



### Applicator staining

#### Data used for analysis

We load data on returned applicators from CRF23 and on staining results from CRF 46. 
We also load the `exposures` table to obtain information on study product use. 

From these three tables, we create the `applicator` table, which includes only participants from the mITT population.

```{r}

tmp <- 
   metadata(mae)$participant_crfs_merged |> 
   as_tibble() |> 
   select(pid, used_applicators, number_applicators, applicator_stain_positive, applicator_stain_negative, applicator_stain_indeterminant, total_applicators_stained, proportion_positive_applicators, total) |> 
   dplyr::rename(
     returned_used_applicators = used_applicators,
     number_of_returned_applicators = number_applicators
   )

study_product <- 
  mae@colData |> 
  as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    metadata(mae)$exposures,  
    by = "pid"
  ) |>
  group_by(pid) |>
  summarize(
    n_product_doses = sum(study_product |> as.integer(), na.rm = TRUE),
    n_product_doses_PP = sum(study_product_PP, na.rm = TRUE),
    comments_studyproduct = str_c(comments_studyproduct[!is.na(comments_studyproduct)], collapse = "; "),
    .groups = "drop"
  ) 

applicator <- 
  mae@colData |> as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(tmp, by = c("pid")) |>
  left_join(study_product, by = "pid") 


```



We also that two participants returned eight applicators. In both cases, comments explain that they had received a spare applicator:

*   Participant 068-20-0425 reported taking the spare applicator out of its wrapping and placing it in the return bag without using or washing any applicators.

*   Participant 068-20-0439 reported inserting the spare applicator on the day of the visit, thinking all applicators had to be used, but also did not wash any of them.



#### Returned applicator statistics

Here, we want to document the proportions of mITT participants who

- returned any used applicators

- returned their complete set of applicators (*i.e.,* 7 or 8 applicators)


```{r}

applicator <- 
  applicator |> 
  mutate(
    returned_complete_set = (number_of_returned_applicators >= 7),
    return_category = case_when(
      (returned_used_applicators == "Yes") & returned_complete_set ~ "Returned complete set",
      (returned_used_applicators == "Yes") & !returned_complete_set ~ "Returned incomplete set",
      returned_used_applicators == "No" ~ "Did not return applicators",
      TRUE ~ "Missing"
    ) |> fct_infreq()
  ) 

applicator |> 
  dplyr::count(return_category) |> 
  mutate(`%` = round(n / sum(n), 3) * 100) |> 
  gt() |> 
  cols_label(return_category = "")

```

#### Staining statistics

Here, we want to document, for those who returned their complete set of applicators, how many got their full set stained.

```{r}
applicator <- 
  applicator |> 
  mutate(
    staining_done_category = 
      case_when(
        (number_of_returned_applicators == 0) | is.na(number_of_returned_applicators) ~ "No applicators returned",
        is.na(total_applicators_stained) ~ "No staining done",
        total_applicators_stained == number_of_returned_applicators ~ "All returned applicators stained",
        total_applicators_stained < number_of_returned_applicators ~ "Partial staining",
        total_applicators_stained > number_of_returned_applicators ~ "???",
        TRUE ~ "???"
      )
  )

```

```{r}
applicator |> 
  dplyr::count(return_category, staining_done_category) |> 
  group_by(return_category) |>
  mutate(
    `%` = round(n / sum(n), 3) * 100
  ) |>
  gt(row_group_as_column = TRUE)
```


```{r}

applicator |> 
  dplyr::count(return_category, staining_done_category) |> 
  group_by(return_category) |>
  mutate(
    `%` = round(n / sum(n), 3) * 100
  ) |>
  gt(row_group_as_column = TRUE)

```

#### Positive staining statistics

Here, we document, for the mITT participants who returned their complete set and got all of their applicators stained, the number of positively stained applicators.


```{r}

applicator |> 
  mutate(
    positive_staining_category = 
      ifelse(
      applicator_stain_positive == total_applicators_stained,
      "All stained applicators are positive",
      "Some stained applicators are not positive"
      )
  ) |> 
  dplyr::count(return_category, staining_done_category, positive_staining_category) |> 
  group_by(return_category, staining_done_category) |> 
  mutate(`%` = round(n / sum(n), 3) * 100) |>
  gt(row_group_as_column = TRUE) |>
  cols_label(
    positive_staining_category = "Staining result"
  )

```





```{r}

applicator |> 
  filter(
    return_category == "Returned complete set",
    staining_done_category == "All returned applicators stained"
  ) |> 
  dplyr::count(
    return_category,
    proportion_positive_applicators, 
    str_c(100*proportion_positive_applicators, "%")
  ) |> 
  mutate(`%` = round(n / sum(n), 3) * 100) |>
  select(-proportion_positive_applicators) |> 
  group_by(return_category) |> 
  gt(row_group_as_column = TRUE) |> 
  cols_label(
    `str_c(100 * proportion_positive_applicators, "%")` = "% of positive applicators"
  )
  
  
```


```{r}

applicator |> 
  filter(
    return_category == "Returned complete set",
    staining_done_category == "All returned applicators stained"
  ) |> 
  mutate(
    number_of_non_positive_applicators = 
      total_applicators_stained - applicator_stain_positive
  ) |> 
  dplyr::count(
    return_category, number_of_non_positive_applicators
  ) |> 
  mutate(`%` = round(n / sum(n), 3) * 100) |>
  group_by(return_category) |> 
  gt(row_group_as_column = TRUE) |> 
  cols_label(
    `number_of_non_positive_applicators` = "n non-positive"
  )
  
  
```

#### Comparison with declared number of doses taken

```{r}

applicator |> 
  filter(
    return_category == "Returned complete set",
    staining_done_category == "All returned applicators stained"
  ) |>
  mutate(
    applicator_stain_positive_fct = applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing"),
    n_product_doses_fct = n_product_doses |> as.factor()
  ) |>
  dplyr::count(
    n_product_doses, n_product_doses_fct, 
    applicator_stain_positive, applicator_stain_positive_fct
    ) |>
  mutate(
    label = str_c(n, " (", round(100 * n / sum(n)), "%)") 
  ) |> 
  ggplot() + 
  aes(
    x = n_product_doses_fct , 
    y = applicator_stain_positive_fct, 
    fill = applicator_stain_positive >= n_product_doses,
    alpha = n
  ) +
  geom_tile() +
  geom_label(aes(label = label), size = 3) +
  scale_fill_manual(na.value = "gray70", values = c("tomato", "steelblue2")) +
  # scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none", alpha = "none") +
  xlab("Number of doses taken (self-report)") +
  ylab("Number of positive applicators") +
  labs(
    caption = "Participants who returned their complete set of applicators were included in this analysis"
  ) 


```



### Time since last dose in 7-days active arms (LC-106-7, LC-115)

We compute this time based on self-reported time of last study product use (daily - CRF plate 32/33) 
-> date/time of last study product = use the crf 32/33 `visit_day` + answer to when? (early morning, etc.)
-> swab time = use `study_day` of the weekly visit.


To compute the time between the last dose taken prior to the in-person visit at week 2, we use information from three sources: crf32 for the time of insertion of the study product, the exposure table for the date of the last dose, and the visits_crfs_merged table for the study day of the week 2 in-person visit.

We create category of the time of the last study product : 

*   `same day` : last dose taken on the same day as the visit (before 6 p.m.)
*   `day before` : last dose taken the day before the visit 
*   `more thean 1 day` : last dose taken more than one day as the visit


```{r}
#| eval: true


study_product <-
  mae@colData |>
  as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(
    metadata(mae)$exposures |> select(pid, visit_code, study_product),
  by = "pid"
  ) |>
  left_join(
    metadata(mae)$visits_crfs_merged |> as_tibble() |> select(pid, visit_code, study_day, insert_study_product_time),
    by = (c("pid", "visit_code"))) |>
  dplyr::rename(
    study_day_product = study_day,
    visit_code_product = visit_code
  ) 


# study_day visit 2 in person
# ! pid 068100026 appear 2 times ! -> remove using filter(!is.na(study_day_visit2))
visit2_studyday <- 
  metadata(mae)$visits_crfs_merged |> 
  as_tibble() |> 
  select(pid, visit_code, study_day) |> 
  distinct() |> 
  filter(visit_code == "1200") |> 
  dplyr::rename(
    study_day_v2 = study_day
  ) |> 
  dplyr::filter(!is.na(study_day_v2))
  
study_prod_time <- 
  study_product |> 
  left_join(visit2_studyday |> select(-visit_code), by = "pid") |> 
  filter(arm!="Pl") |> 
  group_by(pid) |> 
  filter(study_product =="1") |> 
  filter(study_day_product <= study_day_v2) |>  # only consider doses taken before v2
  filter(!((study_day_product == study_day_v2) & (insert_study_product_time %in% c("Late evening (9pm-midnight)", "Evening (6pm-9pm)")))) |> 
  arrange(study_day_product) |> 
  slice_tail(n = 1) |>              
  ungroup() 

# create category 
study_prod_time <- 
  study_prod_time |> 
  mutate(last_dose = case_when(
    study_day_product == study_day_v2 ~ "same day", 
    study_day_product == study_day_v2-1 ~ "day before", 
    study_day_product < study_day_v2-1~ "more than one day"
  ), 
  last_dose = factor(last_dose, levels = c("same day", "day before", "more than one day")))


```

Table

```{r}

study_prod_time |> 
  dplyr::count(last_dose) |> 
  gt()

```

```{r}

study_prod_time |> 
  group_by(site, arm, last_dose) |> 
  summarize(
    n = n(),  
    .groups = "drop"
  ) |> 
  ungroup() |> 
  pivot_wider(
    id_cols = c(site, last_dose), 
    names_from = arm,
    values_from = n, values_fill = 0
  ) |> 
  group_by(site) |> 
  gt()
```


### Sensitivity analyses 

See "At **98** of these visits remote from dosing, where an LBP strain was detected by metagenomics, LBP strains made up > 50% of the community in **85** (**87**%), suggesting that if the LBP strains were retained they usually established dominance."

We take the "colonized at" data from the `col_LBP_mg` SE. We filter for participants in active arms and for visits remote from dosing

*   Week 3 to 5 for LC-106-7 and LC-115
*   Week 2 to 5 for LC-106-o and LC-106-3

Among participants who achieved the primary outcome, LBP strains made up >= 50% in YY


```{r}

col_at <- 
  mae@colData |> as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT, arm != "Pl") |>
  left_join(
    mae[["col_LBP_mg"]] |>
      as_tibble() |>
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      )
  ) |>
  dplyr::filter(
    .feature == "colonized_LBP_at_mg" &
      (arm %in% c("LC-106-7", "LC-115") & visit_code %in% c("1300", "1400", "1500") |
       arm %in% c("LC-106-o", "LC-106-3") & visit_code %in% c("1200", "1300", "1400", "1500")
      )
  ) |>
  filter(outcome) # only primary outcome achieved 

col_at |> 
  left_join(mae[["mg"]] |> as_tibble(), by = ".sample") |> 
  filter(!is.na(LBP)) |> # only LBP strain
  group_by(.sample) |> 
  summarise(
    prop_tot_LBP = sum(rel_ab, na.rm = TRUE),
    .groups = "drop"
  ) |> 
  dplyr::count(prop_tot_LBP >= 0.5) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() 

  

```

```{r}

# old

# propLBP_week3_5 <- 
#   mae[["mg"]] |> 
#   as_tibble() |> 
#   dplyr::left_join(
#     mae@colData |> as_tibble() |> select(uid, pid, arm, mITT, visit_code),
#     by = join_by(.sample == uid)
#   ) |>
#   filter(mITT) |> 
#   filter(arm %in% c("LC-106-7", "LC-115")) |> 
#   filter(visit_code %in% c("1300", "1400", "1500")) |> 
#   filter(!is.na(LBP)) |> 
#   group_by(pid, visit_code) |>
#   summarise(
#     prop_tot_LBP = sum(rel_ab, na.rm = TRUE),
#     .groups = "drop"
#   ) 
# 
# propLBP_week3_5|>
#   dplyr::count(prop_tot_LBP > 0)
# 
# propLBP_week3_5 |>
#   dplyr::count(prop_tot_LBP > 0.5)

```


### LBP colonization in participants with BV post-MTZ

see "After oral metronidazole treatment, 22/70 (30%) people still had a Nugent score of 7 or higher, indicating a failure to resolve BV. Among the 16 of these people exposed to LBP, ZZ had a detectable LBP strain identified after treatment by metagenomics, and TT by qPCR during treatment." 

The Nugent score is available in CRF14. We are interested in the Nugent score value at the visit following metronidazole treatment (visit 1100).

We first create a table containing the Nugent score for all participants at all visits. We then create a variable `nugent_positive`, which is `TRUE` if `nugent_total_score >= 7` and `FALSE` otherwise. We also create a variable `active_arm` to group participant by active arm (i.e. LC106-o, LC-106-7, LC-106-3, LC-115) *vs* Placebo 

```{r}
# nugent score for all visits 

nugent_score <- 
  mae@colData |> 
  as_tibble() |> 
  select(uid, pid, visit_code, study_day, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    metadata(mae)$visits_crfs_merged |> 
      as_tibble() |> 
      select(pid, visit_code, nugent_total_score),
    by = c("pid", "visit_code")
  ) |> 
  # some pid x visit are duplicate but there is no data for the nugent score, so we remove the duplicate visit with no data for nugent score
  group_by(pid, visit_code) |> 
  arrange(is.na(nugent_total_score)) |>  
  dplyr::slice(1) |>  
  ungroup() |>
  group_by(visit_code) |> 
  mutate(any_Nugent = any(!is.na(nugent_total_score))) |> 
  ungroup() |> 
  filter(any_Nugent) |> 
  group_by(pid) |>
  mutate(
    active_arm = arm != "Pl",
    nugent_positive = nugent_total_score >= 7
  ) |> 
  ungroup()



```

```{r}
#| fig-height: 6
#| fig-width: 8

nugent_score |> 
  filter(visit_code == "1100") |> 
  ggplot()+ 
  aes(x = nugent_total_score |> as.factor(), y = pid |> as.factor(), fill = nugent_positive |> as.factor()) +
  geom_tile() +
  scale_fill_manual(
    name = "Nugent score >= 7",
    values = c("TRUE" = "lightblue", "FALSE" = "lightgray"),
    na.value = "gray50"
  ) + 
  scale_y_discrete(drop = FALSE) |> 
  labs(x = "Nugent score", y = "Participant ID", title = "Nugent score at visit 1100") + 
  theme(axis.text.y = element_text(size = 4))
  
nugent_score |> 
  ggplot()+ 
  aes(x = visit_code, y = pid, fill = nugent_positive |> as.factor()) +
  geom_tile() +
  scale_fill_manual(
    name = "Nugent score positive (>= 7)",
    values = c("TRUE" = "lightblue", "FALSE" = "lightgray"),
    na.translate = FALSE
  ) + 
  labs(x = "Visit Code", y = "Participant ID") + 
  theme(axis.text.y = element_text(size = 4))

  
nugent_score |> 
  ggplot()+ 
  aes(x = visit_code, y = pid, fill = nugent_total_score) +
  geom_tile() +
  scale_fill_gradient(
    name = "Nugent score",
    low = "lightblue1", high = "red3"
  ) + 
  labs(x = "Visit Code", y = "Participant ID") + 
  theme(axis.text.y = element_text(size = 4))


```





```{r}

nugent_score |>
  filter(visit_code == "1100") |> 
  dplyr::count(nugent_positive) |> 
  gt(caption = "Number of mITT participant with BV (nugent_positive == TRUE) post-MTZ (visit 1100)")

```

```{r}

nugent_score |>
  filter(visit_code == "1100") |> 
  dplyr::count(active_arm, nugent_positive) |> 
  gt(caption = "Number of mITT participant with BV (nugent_positive == TRUE) post-MTZ (visit 1100) by active arm")

```




At visit 1100, among participants with BV who were exposed to the LBP (i.e., in the active arm), 5 participants had a detectable LBP strain identified after treatment by metagenomics.


```{r}

# among the 12 of these people exposed to LBP

tmp <- 
  nugent_score |>
  filter(visit_code == "1100") |> 
  filter(active_arm) |>
  # filter(nugent_positive | is.na(nugent_positive)) |> #  
  left_join(
    # add mg data to see how many had detectable LBP strain post-MTZ
    mae[["mg"]] |> as_tibble() |>  # add mg data
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |>
      filter(visit_code == "1200", !poor_quality_mg_data)|>
      filter(!is.na(LBP)) |> #only LBP strain
      group_by(pid) |>
      summarise(prop_tot_LBP = sum(rel_ab)) |>
      arrange(prop_tot_LBP |> desc()) |> 
      mutate(LBP_detected_post_INT = prop_tot_LBP >= 0.05),
    by = c("pid")
  )  

tmp |> 
  dplyr::count(nugent_positive, LBP_detected_post_INT) |> 
  gt(caption = "Number of mITT participant in one of the active arms with BV diagnosis post-MTZ (visit 1100) and LBP detection (>= 5% total LBP rel. ab) post-INT (visit 1200)")
  
```

This table should be the same as Table 3 in the paper, but it differs slightly: we have 6 for Pl and not 8, 1 and not 2 for LC-106-o and 2 and not 3 for LC-115. 
I think the missing participants are participants with missing values for which we would have taken the value from the previous visit.

```{r}

#nugent score of active arm at visit 1100 
nugent_score |> 
  filter(visit_code == "1100") |> #%in% c("1100", "1500", "2120")
  group_by(arm) |> #visit_code
  summarise(
    n = n(),
    n_missing = sum(is.na(nugent_positive)), 
    n_positive = sum(nugent_positive, na.rm = TRUE),
    p = n_positive / n,
    CI = binom::binom.confint(n_positive, n, method = "exact")
  ) |>
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(-CI, -p) |> 
  gt() |> 
  tab_header(
    title = "Proportion of Participants with Nugent Score ≥ 7 at Visit 1100 (week1)"
  ) |>
  cols_label(
    n = "N participants",
    n_missing = "n participants without Nugent score",
    n_positive = "n (%) participants with Nugent score ≥ 7",
    pct = "Percentage",
    CI_text = "95% CI"
  )

```

### rBV by colonization status

In this section, we are investigating whether LBP colonization is protective of rBV.

So, we only include participants who were BV-cured post-MTZ, then count the number and proportions of participants who had rBV among those who met the primary outcome and those who did not.


```{r}


rBV_stats <- 
  # we first define for each mITT participant whether they were BV-cured or not post-MTZ by Nugent
  nugent_score |> 
  filter(visit_code == "1100", mITT) |> 
  select(uid, pid, visit_code, site, mITT, active_arm, arm, nugent_total_score) |> 
  mutate(BV_cure_post_MTZ = nugent_total_score < 7) |> 
  # we then specify for each of these participants whether they met the criteria for the primary endpoint of LBP colonization by week 5
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1500", .feature == "colonized_LBP_by_mg") |> 
      mutate(LBP_colonization_by_week5 = outcome |> replace_na(FALSE)) |> 
      select(pid, LBP_colonization_by_week5),
    by = join_by(pid)
  ) |> 
  # we next check who had BV (or rBV) by week 12
  left_join(
    nugent_score |> 
      select(pid, visit_code, nugent_positive) |> 
      filter(as.numeric(visit_code) > 1100, as.numeric(visit_code) <= 2120) |> 
      # QUESTION for line above: should it be any time after the post-MTZ visit or anytime between week 5 and 12???
      group_by(pid) |> 
      summarize(
        BV_by_week12 = any(nugent_positive, na.rm = TRUE),
        BV_after_week5 = any(nugent_positive & as.numeric(visit_code) > 1500, na.rm = TRUE), # any BV after week 5
        ),
    by = join_by(pid)
  ) |> 
  mutate(
    rBV_by_week12 = BV_by_week12 & BV_cure_post_MTZ # rBV if BV by week 12 and cured post-MTZ
  )
  
  
rBV_stats |> 
  filter(active_arm) |> 
  dplyr::count(active_arm, BV_cure_post_MTZ, LBP_colonization_by_week5, BV_by_week12)

```

```{r}

rBV_stats |> 
  filter(active_arm, BV_cure_post_MTZ) |> 
  dplyr::count(LBP_colonization_by_week5, BV_by_week12) |> 
  group_by(LBP_colonization_by_week5) |> 
  mutate(
    N = sum(n),
    `%` = round(n / N, 3) * 100,
    CI = binom::binom.confint(n, N, method = "exact"),
    `95% CI` = str_c(round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%")
  ) |> 
  select(-CI)

```





See "*If we combine all active arms vs. placebo, at 5 weeks recurrence was 33% vs. 67% (p = 0.05) and at 12 weeks 44% vs. 70% (p = 0.13).  Participants who achieved the primary outcome of LBP detection were less likely to have BV recurrence during the 12 week follow up: YY/YY (16/45) vs. YY/YY (25/48) who did not colonize (p = YY).*"


```{r}


rBV_stats <- 
  # we first define for each mITT participant whether they were BV-cured or not post-MTZ by Nugent
  nugent_score |> 
  select(-any_Nugent, -nugent_positive) |> 
  filter(visit_code == "1100") |> 
  mutate(BV_cure_post_MTZ = nugent_total_score < 7) |> 
  # we then specify for each of these participants whether they met the criteria for the primary endpoint of LBP colonization by week 5
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1500", .feature == "colonized_LBP_by_mg") |> 
      mutate(LBP_colonization_by_week5 = outcome |> replace_na(FALSE)) |> 
      select(pid, LBP_colonization_by_week5),
    by = join_by(pid)
  ) |> 
  # we next check who had BV (or rBV) by week 12
  left_join(
    nugent_score |> 
      select(pid, visit_code, nugent_positive) |> 
      filter(as.numeric(visit_code) > 1100, as.numeric(visit_code) <= 2120) |> 
      # QUESTION for line above: should it be any time after the post-MTZ visit or anytime between week 5 and 12???
      group_by(pid) |> 
      summarize(
        BV_by_week12 = any(nugent_positive, na.rm = TRUE),
        BV_after_week5 = any(nugent_positive & as.numeric(visit_code) > 1500, na.rm = TRUE), # any BV after week 5
        ),
    by = join_by(pid)
  ) |> 
  mutate(
    rBV_by_week12 = BV_by_week12 & BV_cure_post_MTZ, # rBV if BV by week 12 and cured post-MTZ
  )
  
  
rBV_stats |> filter(active_arm) |> dplyr::count(active_arm, LBP_colonization_by_week5, BV_after_week5)

```





> Question : how is define recurrence (at week 5, week 12) ? The participant must have been cured between "after MTZ" and week 5 (12) ? 

```{r}
# Active arms vs. placebo, 
# at 5 weeks recurrence was 33% vs. 67% (p = 0.05) -> OK 
# at 12 weeks recurrence was 44% vs. 70% (p = 0.13) -> ?

# nugent_score |> 
#   filter(visit_code != "0000") |>  # remove visit 0 
#   group_by(pid) |> 
#   mutate(n_cured = sum(!nugent_positive, na.rm = TRUE)) |> 
#   ungroup() |> 
#   filter(visit_code == "1500", active_arm) |> 
#   dplyr::count(nugent_positive, n_cured)
```

```{r}
col_by_week5 <- 
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_mg"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1500", .feature == "colonized_LBP_by_mg")
  ) |> 
  mutate(LBP_colonization_by_week5 = outcome |> replace_na(FALSE)) 


nugent_score |> 
  left_join(col_by_week5 |> select(pid, LBP_colonization_by_week5), 
            by = "pid") |> 
  arrange(pid, visit_code) |>
  group_by(pid, active_arm) |>
  summarise(
    LBP_colonization_by_week5 = any(LBP_colonization_by_week5, na.rm = TRUE),
    BV_recurrence = {
      cured <- cumsum(!nugent_positive & !is.na(nugent_positive)) > 0
      any(nugent_positive & cured, na.rm = TRUE)
    },
    .groups = "drop"
  ) |> 
  dplyr::count(active_arm, LBP_colonization_by_week5, BV_recurrence)


```


```{r}

nugent_score |> 
  filter(visit_code == "1500") |> 
  group_by(active_arm) |> 
  summarise(
    n = n(),
    n_positive = sum(nugent_positive, na.rm = TRUE),
    p = n_positive / n,
    CI = binom::binom.confint(n_positive, n, method = "exact")
  ) |>
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(-CI, -p) |> 
  gt() |> 
  tab_header(
    title = "Proportion of Participants with Nugent Score ≥ 7 at Visit 1500 (week 5)"
  ) |> 
  cols_label(
    n = "N participants",
    n_positive = "n (%) participants with nugent score >= 7",
    pct = "Percentage",
    CI_text = "95% CI"
  )
  
  nugent_score |> 
  filter(visit_code == "2120") |> 
  group_by(active_arm) |> 
  summarise(
    n = n(),
    n_positive = sum(nugent_positive, na.rm = TRUE),
    p = n_positive / n,
    CI = binom::binom.confint(n_positive, n, method = "exact")
  ) |>
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(-CI, -p) |> 
  gt() |> 
  tab_header(
    title = "Proportion of Participants with Nugent Score ≥ 7 at Visit 2120 (week12)"
  ) |> 
  cols_label(
    n = "N participants",
    n_positive = "n (%) participants with nugent score >= 7",
    pct = "Percentage",
    CI_text = "95% CI"
  )
  
  
  
```

Participants who achieved the primary outcome of LBP detection were less likely to have BV recurrence during the 12 week follow up: YY/YY vs. YY/YY who did not colonize (p = YY).

> TODO : BV recurrence : il faut avoir été cured pour avoir une BC recurrence Cured quand ? n'importe quand entre MTZ et w12 ? 

```{r}

nugent_score |> 
  filter(visit_code == "2120") |> 
  left_join(col_by_week5 |> select(pid, LBP_colonization_by_week5), by="pid") |> 
  group_by(LBP_colonization_by_week5) |> 
  summarise(
    n = n(),
    n_positive = sum(nugent_positive, na.rm = TRUE),
    p = n_positive / n,
    CI = binom::binom.confint(n_positive, n, method = "exact")
  ) |>
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(-CI, -p) |> 
  gt() |> 
  tab_header(
    title = "Proportion of Participants with Nugent Score ≥ 7 at Visit 2120 (week12)"
  ) |> 
  cols_label(
    n = "N participants",
    n_positive = "n (%) participants with nugent score >= 7",
    pct = "Percentage",
    CI_text = "95% CI"
  )
    
```


### LBP Colonization dominance

See *When the LBP isolates were detected they were most often the dominant species in the community*

Qu'est ce qu'on entend par détecté ? Metagenomics ou qPCR ? A un niveau de 5% ? 
Primary outcome ? 

```{r}

rel_abs <- 
  mae[["mg"]] |> 
  as_tibble() |> 
  filter(!poor_quality_mg_data) |> 
  left_join(
    mae |> colData() |> as_tibble(), 
    by = join_by(uid)
  ) |>
  filter(randomized, mITT)

rel_abs |> 
  group_by(.sample) |> 
  summarise(
    detected = any(!is.na(LBP) & rel_ab > 0, na.rm = TRUE),
    crispatus_abundance = sum(rel_ab[species == "crispatus"], na.rm = TRUE), 
    crispatus_dominance = ifelse(crispatus_abundance > 0.5, TRUE, FALSE), 
    .groups = "drop"
  ) |> 
  filter(detected) |> 
  dplyr::count(crispatus_dominance, name = "n") |> 
  mutate(
    crispatus_dominance = if_else(crispatus_dominance, "Yes", "No"),
    total = sum(n),
    pct = round(100 * n / total, 1),
    CI = binom::binom.confint(n, total, method = "exact"),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(crispatus_dominance, n, pct, CI_text) |> 
  gt() |> 
  tab_header(
    title = md("Dominance of *L. crispatus* when LBP strains are detected")
  ) |> 
  cols_label(
    crispatus_dominance = "L. crispatus dominance",
    n = "N samples with LBP detected",
    pct = "Percentage",
    CI_text = "95% CI"
  )

```

See *Additionally, if a participant established L. crispatus dominance with the LBP strains, they had a significantly lower chance of recurrent BV *

At any time ? 

```{r}
#| fig-height: 6
#| fig-width: 8

tmp <- 
  rel_abs |> 
  group_by(.sample) |> 
  summarise(
    detected = any(!is.na(LBP) & rel_ab > 0, na.rm = TRUE),
    crispatus_abundance = sum(rel_ab[species == "crispatus"], na.rm = TRUE), 
    LBP_abundance = sum(rel_ab[!is.na(LBP)], na.rm = TRUE),
    LBP_dominance = ifelse(LBP_abundance>0.5, TRUE, FALSE), 
    crispatus_dominance = ifelse(crispatus_abundance>0.5, TRUE, FALSE), 
    .groups = "drop"
  ) |> 
  left_join(nugent_score |> 
              select(uid, pid, visit_code, nugent_total_score, nugent_positive), 
            by = c(".sample"="uid")) 

tmp |>  
  filter(!is.na(visit_code)) |> 
  ggplot() + 
  aes(x=visit_code, y = pid, 
      shape = nugent_positive |> as.character(), 
      col = LBP_dominance |> as.character()) + 
  geom_point() + 
  scale_shape_manual(
    name = "Nugent Postive", 
    values = c("TRUE" = 16, "FALSE" = 1)
  ) + 
  scale_color_manual(
    name = "LPB Dominance", 
    values = c("TRUE" = "green3", "FALSE" = "orchid2" )
  ) + 
  labs(x = "Visit code", y = "Pid") + 
  theme(axis.text.y = element_text(size = 4))
  
```

```{r}
tmp |> 
  filter(!is.na(LBP_dominance), !is.na(nugent_positive)) |> 
  filter(visit_code == "1500") |> 
  dplyr::count(LBP_dominance, nugent_positive) |> 
  group_by(LBP_dominance) |> 
  mutate(
    pct = round(100 * n / sum(n), 1)
  ) |> 
  ungroup() |> 
  gt()
```

### LBP detectable at week 12

See "*However, an ideal product would durably colonize the majority of people, and given that LBP strains were detectable in only 34% of active arm participants at 12 weeks this product still needs optimization*"

```{r}
rel_abs |> 
  filter(visit_code == "2120") |> 
  group_by(.sample) |> 
  summarise(detected = any(!is.na(LBP) & rel_ab > 0, na.rm = TRUE)) |> 
  ungroup() |> 
  dplyr::count(detected) |>
  mutate(
    pct = round(100 * n / sum(n), 1)
  ) |> 
  gt()
  
```


### LBP detection at week3 qPCR

See "When using a more sensitive qPCR, we detected LBP strains at  > 10^7 copies/swab in YY/71 exposed people at V3, the week after product cessation, and YY/71 exposed people at V9, 12 weeks after product use". 

1. At least a strain detected with > 10^7 copie per swab  

We analyzed the `qPCR` SummarizedExperiment from the MAE. For each LBP strain, we used the variable `copies_per_swab_med` (the median across technical replicates) to define a binary outcome (`outcome`), which is set to TRUE when the strain was detected above 10^7 copies per swab.

We then summarized this information at the participant × visit level: the variable `detected` is set to TRUE if any LBP strain was detected above the threshold at that visit.

```{r}

detected_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["qPCR"]] |> 
      as_tibble() |> 
      select(.sample, .feature, copies_per_swab_med) |> 
      filter(.feature != "16S") |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) 
  ) |> 
  mutate(outcome = ifelse(copies_per_swab_med > 1e7, TRUE, FALSE)) |> 
  group_by(arm, pid, visit_code) |>
  summarise(detected = any(outcome, na.rm = TRUE), .groups = "drop")

```

Finally, we restricted the analysis to participants randomized to an active arm (i.e., excluding placebo) and counted the number of participants with at least one LBP strain detected at visits 1300 and 2120.

```{r}

detected_qPCR |> 
  filter(visit_code %in% c("1200","2120")) |> # C'est stupide, mais V3, c'est 1200 
  filter(arm != "Pl") |> 
  group_by(visit_code) |>
  summarise(
    n    = sum(detected),
    tot_participant = n_distinct(pid),
    .groups = "drop"
  )

```

2. Total of LBP strains detected with > 10^7 copie per swab

We analyzed the `qPCR` SummarizedExperiment from the MAE. For each LBP strain, we used the variable `copies_per_swab_med` (the median across technical replicates) to calculate the total copies per swab for LBP strains per sample (`tot_copie_swab`). 

We then summarized this information at the participant × visit level: the variable `detected` is set to TRUE if `tot_copie_swab` was above 10^7 at that visit.


```{r}

detected_qPCR_bis <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["qPCR"]] |> 
      as_tibble() |> 
      select(.sample, .feature, copies_per_swab_med) |> 
      filter(.feature != "16S") |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) 
  ) |> 
  group_by(arm, mITT, pid, visit_code) |> 
  summarise(tot_copie_swab = sum(copies_per_swab_med, na.rm = TRUE),  
            detected = tot_copie_swab > 1e7, 
            .groups = "drop") 

```

```{r}

detected_qPCR_bis |> 
  filter(visit_code %in% c("1200","2120")) |> # C'est stupide, mais V3, c'est 1200 
  filter(arm != "Pl") |> 
  group_by(visit_code) |>
  summarise(
    n    = sum(detected),
    tot_participant = n_distinct(pid),
    .groups = "drop"
  )


```


### LBP detection week 3 (1300) and week 4_12 - qPCR

See "The Lactin-V strain is detectable in 69-79% by qPCR in the week after cessation of product, and after 4-12 weeks of off-product follow up this proportion was 47-48%.22,24 We saw a similar proportion of detected LBP strains by qPCR in the week after cessation of product, and after an additional 7 weeks off product."

```{r}
# by qPCR 

# one week after LBP = 1300
# col_at ? 
col_at_week3_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1300", .feature == "colonized_LBP_at_qpcr")
  ) |> 
  mutate(LBP_colonization_at_week3 = outcome |> replace_na(FALSE)) 

col_at_week3_qPCR |> 
  dplyr::count(LBP_colonization_at_week3) |> 
  mutate(total = sum(n), 
         p = n/total)



# 4-12 week after LBP = 1700, 1900, 2120
col_at_week4_12_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code %in% c("1700", "1900", "2120"), .feature == "colonized_LBP_at_qpcr")
  ) |> 
  mutate(LBP_colonization_at_week4_12 = outcome |> replace_na(FALSE)) 

col_at_week4_12_qPCR |> 
  group_by(visit_code) |> 
  dplyr::count(LBP_colonization_at_week4_12) |> 
  mutate(total = sum(n), 
         p = n/total)


```






