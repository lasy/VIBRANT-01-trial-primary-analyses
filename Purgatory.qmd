---
title: "Purgatory"
format: html
editor: source
---

# R

## viz and table fct 

```{r}
# make_title <-
#   function(mae){
#     str_c(ifelse(mae@metadata$data_source == "simulated", "Simulated", "Actual Study"), " Data as of ", mae@metadata$date)
#   }


# get_arm_colors <- function(){
#   blue_hue <- 0.61
#   green_hue <- 0.45
#   c(
#     "Pl" = "gray",
#     "Blinded" = "gray",
#     "LC-106-7" = hsv(h = blue_hue, s = 0.7, v = 0.5),
#     "LC-106-3" = hsv(h = blue_hue, s = 0.55, v = 0.8),
#     "LC-106-o" = hsv(h = blue_hue, s = 0.35, v = 1),
#     "LC-115" = hsv(h = green_hue, s = 0.95, v = 0.9)
#     )
# }


# get_origin_colors <- function(){
#   c("SA" = "green3", "US" = "steelblue3", "Other" = "gray80")
# }
```


# Loading data 

## 11/09/2025

```{r loading-mae}
#| eval: true

# mae_file <- 
#   fs::dir_ls(str_c(data_dir(), "04 unblinded MAEs/"), regexp = "mae_full_.*\\.rds$") |> 
#   sort(decreasing = TRUE) |>
#   magrittr::extract(1)
# 
# cat(str_c("Loading the RDS file containing the unblinded VIBRANT MAE: /", mae_file |> str_remove(data_dir()), "\n"))
# 
# mae <- readRDS(mae_file)
# 
# rm(mae_file)
# 
# fs::dir_ls(str_c(data_dir(), "01 Preprocessed and QCed/"), regexp = "exposures_.*\\.Rdata$") |> 
#   sort(decreasing = TRUE) |>
#   magrittr::extract(1) |> 
#   load()
# 
# mae

```

# 03 secondary outcomes

### 24/09

#### Individual LBP strain 

```{r}
# visit_label = ifelse(visit != "screening", str_c(visit, " (W", study_week, ")"), visit |> as.character()) |> fct_reorder(visit |> as.numeric())

LBP_strains |> 
   mutate(
    visit_label = visit |> as.character() |> fct_reorder(visit |> as.numeric())
    ) |> 
  filter(!is.na(arm), !is.na(study_week), study_week >= 2) |> 
  ggplot() +
  aes(x = .feature, y = rel_ab, col = site, fill = site) +
  # geom_point(alpha = 0.5, size = 0.5, position = position_dodge(width = 0.5)) +
  # geom_violin(col = NA, alpha = 0.4) + # > TODO: check if it looks good - IT DOES NOT!
  ggbeeswarm::geom_quasirandom(alpha = 0.5, size = 0.5, dodge.width = 0.5) +
  # geom_boxplot(outlier.size = 0.5) +
  # facet_grid(visit_label ~ LBP + strain_origin , scales = "free_x", space = "free_x") +
  ggh4x::facet_nested(
    rows = vars(visit_label),
    cols = vars(LBP, strain_origin),
    scales = "free_x", space = "free_x") + 
  xlab("LBP strain") +
  scale_y_continuous(
    "Relative abundance", labels = scales::percent,
    breaks = seq(0, 1, by = 0.2)
  ) +
  scale_color_manual("Study\nsite", values = site_colors) +
  scale_fill_manual("Study\nsite", values = site_colors) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) 


g_relative_abundance <- 
  LBP_strains |> 
  mutate(
    visit_label = visit |> as.character() |> fct_reorder(visit |> as.numeric()), 
    strain_origin = recode(strain_origin, "SA" = "ZA strains", "US" = "US strains")
    ) |>
  filter(!is.na(arm), !is.na(study_week), study_week >= 2) |> 
  ggplot() +
  aes(x = .feature, y = rel_ab, col = site, fill = site) +
  # geom_point(alpha = 0.5, size = 0.5) +
  geom_boxplot(outlier.size = 0.7, alpha = 0.4) +
  #facet_grid(visit_label ~ LBP + strain_origin , scales = "free_x", space = "free_x") +
  ggh4x::facet_nested(
    rows = vars(visit_label),
    cols = vars(LBP, strain_origin),
    scales = "free_x", space = "free_x") +
  xlab("") +
  scale_y_continuous(
    "Relative abundance", labels = scales::percent,
    breaks = seq(0, 1, by = 0.2)
  ) +
  scale_color_manual(values = site_colors) +
  scale_fill_manual(values = site_colors) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) 
g_relative_abundance
```


### 08/08 Microbiota trajectory

```{r}
g_trajectories <-
  rel_abs_agg |>
  filter(mITT, randomized != 0, PIPV, !poor_quality_mg_data) |>
  group_by(pid) |> 
  mutate(
    tot_LC115 = sum(rel_ab[LBP == "LC-115"]),
    tot_LBP = sum(rel_ab[!is.na(LBP)])
    ) |> 
  ungroup() |> 
  arrange(desc(PP), -tot_LC115, -tot_LBP) |> 
  mutate(
    pid = pid |> fct_inorder(),
    visit_label = ifelse(visit != "screening", str_c(visit, " (W", study_week, ")"), visit |> as.character()) |> fct_reorder(visit |> as.numeric()),
    ) |> 
  ggplot(aes(y = rel_ab, x = pid, fill = taxon, alpha = ifelse(PP, "PP", "mITT"))) +
  geom_col() +
  facet_grid(visit_label ~ arm + site, scales = "free", space = "free") +
  scale_fill_manual(
    values = get_taxa_colors(rel_abs_agg$taxon |> levels()),
    labels = get_taxa_labels(rel_abs_agg$taxon |> levels()),
    guide = guide_legend(ncol = 1)
    ) +
  scale_alpha_discrete("Population", range = c(0.5, 1)) +
  scale_y_continuous(
    "relative abundance", labels = scales::percent,
    breaks = seq(0, 0.5, by = 0.5), minor_breaks = seq(0, 1, by = 0.25)
  ) +
  scale_x_discrete("Participants") +
  theme(
    strip.text.y = element_text(angle = 0, hjust = 0),
    strip.text.x = element_text(angle = 90, hjust = 0),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )
```



```{r}
#| fig-height: 5
#| fig-width: 13

applicator |> 
  ggplot() +
  aes(x = pid, y = visit_code, fill = number_of_returned_applicators |> as.factor()) +
  facet_grid(. ~ arm, scales = "free", space = "free") +
  geom_tile() + 
  # geom_text(aes(label = str_c(applicator_stain_positive, "/", number_of_returned_applicators)), color = "black", size = 2) +  
  scale_fill_manual( 
    name = "Number of applicators \nreturned",
    values = c(
    "3" = "pink4", 
    "4" = "pink3", 
    "5" = "pink1", 
    "6" = "seagreen2", 
    "7" = "seagreen3", 
    "8" = "seagreen4"
    ), 
    na.translate = FALSE) +
  labs(
    x = "Participant ID",
    y = "Visit code",
    # caption = "Text:\npositive applicators by staining / total number of applicators returned"
    )  + 
  theme(
    axis.text.x = element_blank()
    )

```



Some participants (mostly from the overlapping arm) returned applicators at two different visits. 

According to the CAPRISA Vulindlela Pharmacy, when participants came to the clinic with an incomplete set of used applicators or still had to take additional study product doses, data about number of used applicator returned was reported in the CRFs, but the applicators were given back to participants who were requested/expected to return all applicators at the following visit once study product use was over. Based on these explanations, when applicators were returned at two visits, we keep only the data from the second visit.

```{r}

applicator <- 
  applicator |>
  group_by(pid) |>
  mutate(
    data_complete = !is.na(number_of_returned_applicators) | !is.na(applicator_stain_positive)
  ) |>
  arrange(pid, desc(data_complete), desc(visit_code)) |>
  dplyr::slice(1) |> 
  ungroup()

```

# 05 - daily qPCR 

### 24/09/2025


```{r}
#| fig-width: 12
#| fig-height: 15

map(
  .x = df$arm |> unique() |> sort(),
  ~ df |> 
    filter(.feature != "16S", arm == .x) |> 
    ggplot() +
    aes(x = visit_code, y = copies_per_swab_med, col = LBP ) + #  |> asinh()
    ggh4x::facet_nested(site + pid ~ .) + # scales = "free", space = "free"
    geom_hline(yintercept = 10^6, lty = 2, col = "gray") +
    geom_line(aes(group = .feature)) +
    geom_point() +
    scale_y_log10() +
    expand_limits(y = 10^10) +
    ggtitle(.x) +
    theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
    )
)

```

```{r}
map(
  .x = df$arm |> unique() |> sort(),
  ~ df |> 
    filter(.feature != "16S", arm == .x, study_day >= 0) |> 
    ggplot() +
    aes(x = study_day, y = copies_per_swab_med, col = LBP ) + #  |> asinh()
    ggh4x::facet_nested(site + pid ~ .) + # scales = "free", space = "free"
    geom_hline(yintercept = 10^5, lty = 2, col = "gray40") +
    geom_rect(
      data = tibble(study_day = 0, copies_per_swab_med = NA), 
      xmin = 0.5, xmax = 7.5, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red", col = NA
    ) +
    geom_rect(
      data = tibble(study_day = 0, copies_per_swab_med = NA), 
      xmin = 7.5, xmax = 14.5, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "gold", col = NA
    ) +
    geom_line(aes(group = .feature)) +
    geom_point() +
    scale_y_log10() +
    expand_limits(y = 10^10) +
    scale_x_continuous(breaks = seq(0, 35, by = 7)) +
    ggtitle(.x)
)

```

wo CI

```{r}
bind_rows(
  df_summ_pid |> filter(arm != "Pl"),
  df_summ_pid |> filter(arm != "Pl") |> mutate(site = "both"),
  df_summ_pid |> filter(arm != "Pl", arm != "LC-106-3") |> mutate(arm = "all active arms excl. LC-106-3"),
  df_summ_pid |> filter(arm != "Pl", arm != "LC-106-3") |> mutate(site = "both", arm = "all active arms excl. LC-106-3")
) |> 
  filter(mITT) |> 
  group_by(arm, site) |> 
  summarize(
    mean_days_exposed = mean(n_days_exposed, na.rm = TRUE) |> round(1),
    mean_prop_days_exposed = (100 * mean(prop_days_exposed, na.rm = TRUE)) |> round() |> str_c("%"),
  ) |>  
  select(-mean_days_exposed) |>
  pivot_wider(names_from = arm, values_from = mean_prop_days_exposed) |> 
  gt(caption = "Proportion of days exposed by qPCR (daily home swabs), among dosing days: average %") 
```


Using bootstrap's CI 

```{r}

boot_mean <- function(data, indices) {
  d <- data[indices, ]
  mean(d$prop_days_exposed, na.rm = TRUE)
}

boot_ci <- function(boot_obj) {
  ci <- tryCatch(
    boot::boot.ci(boot_obj, type = "perc"),
    error = function(e) NULL
  )
  if (is.null(ci) || is.null(ci$percent)) {
    return(c(NA, NA))
  } else {
    return(ci$percent[4:5])
  }
}

df_summ_pid |> 
  filter(arm != "Pl") |> 
  bind_rows(
    df_summ_pid |> filter(arm != "Pl") |> mutate(site = "both"),
    df_summ_pid |> filter(arm != "Pl", arm != "LC-106-3") |> mutate(arm = "all active arms excl. LC-106-3"),
    df_summ_pid |> filter(arm != "Pl", arm != "LC-106-3") |> mutate(site = "both", arm = "all active arms excl. LC-106-3")
  ) |> 
  filter(mITT) |> 
  group_by(arm, site) |> 
  nest() |> 
  mutate(
    boot = map(data, ~ boot::boot(.x, statistic = boot_mean, R = 1000)),
    ci_vals = map(boot, boot_ci),
    mean_prop = map_dbl(boot, ~ .x$t0),
    ci_lower = map_dbl(ci_vals, ~ .x[1]),
    ci_upper = map_dbl(ci_vals, ~ .x[2]),
    mean_with_ci = str_c(percent(mean_prop, accuracy = 1), " (", percent(ci_lower, accuracy = 1), "–", percent(ci_upper, accuracy = 1), ")")
  ) |> 
  select(arm, site, mean_with_ci) |> 
  pivot_wider(names_from = arm, values_from = mean_with_ci) |> 
  ungroup() |> 
  gt(caption = "Proportion of days exposed by qPCR (daily home swabs), among dosing days: average % with 95% bootstrap CI")

```

# 04 - supplementary analyses

### 24/09/2025

#### Nugen score & BV

```{r}
# nugent score for all visits 

nugent_score <- 
  mae@colData |> 
  as_tibble() |> 
  select(uid, pid, visit_code, study_day, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    metadata(mae)$visits_crfs_merged |> 
      as_tibble() |> 
      select(pid, visit_code, nugent_total_score),
    by = c("pid", "visit_code")
  ) |> 
  # some pid x visit are duplicate but there is no data for the nugent score, so we remove the duplicate visit with no data for nugent score
  group_by(pid, visit_code) |> 
  arrange(is.na(nugent_total_score)) |>  
  dplyr::slice(1) |>  
  ungroup() |>
  group_by(visit_code) |> 
  mutate(any_Nugent = any(!is.na(nugent_total_score))) |> 
  ungroup() |> 
  filter(any_Nugent) |> 
  group_by(pid) |>
  mutate(
    active_arm = arm != "Pl",
    nugent_positive = nugent_total_score >= 7
  ) |> 
  ungroup()

nugent_score |> 
  filter(visit_code == "1100") |> 
  ggplot()+ 
  aes(x = nugent_total_score |> as.factor(), y = pid |> as.factor(), fill = nugent_positive |> as.factor()) +
  geom_tile() +
  scale_fill_manual(
    name = "Nugent score >= 7",
    values = c("TRUE" = "lightblue", "FALSE" = "lightgray"),
    na.value = "gray50"
  ) + 
  scale_y_discrete(drop = FALSE) |> 
  labs(x = "Nugent score", y = "Participant ID", title = "Nugent score at visit 1100") + 
  theme(axis.text.y = element_text(size = 4))
  
nugent_score |> 
  ggplot()+ 
  aes(x = visit_code, y = pid, fill = nugent_positive |> as.factor()) +
  geom_tile() +
  scale_fill_manual(
    name = "Nugent score positive (>= 7)",
    values = c("TRUE" = "lightblue", "FALSE" = "lightgray"),
    na.translate = FALSE
  ) + 
  labs(x = "Visit Code", y = "Participant ID") + 
  theme(axis.text.y = element_text(size = 4))

```

This table should be the same as Table 3 in the paper, but it differs slightly: we have 6 for Pl and not 8, 1 and not 2 for LC-106-o and 2 and not 3 for LC-115. 
I think the missing participants are participants with missing values for which we would have taken the value from the previous visit.

```{r}

#nugent score of active arm at visit 1100 
nugent_score |> 
  filter(visit_code == "1100") |> #%in% c("1100", "1500", "2120")
  group_by(arm) |> #visit_code
  summarise(
    n = n(),
    n_missing = sum(is.na(nugent_positive)), 
    n_positive = sum(nugent_positive, na.rm = TRUE),
    p = n_positive / n,
    CI = binom::binom.confint(n_positive, n, method = "exact")
  ) |>
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(-CI, -p) |> 
  gt() |> 
  tab_header(
    title = "Proportion of Participants with Nugent Score ≥ 7 at Visit 1100 (week1)"
  ) |>
  cols_label(
    n = "N participants",
    n_missing = "n participants without Nugent score",
    n_positive = "n (%) participants with Nugent score ≥ 7",
    pct = "Percentage",
    CI_text = "95% CI"
  )

```

#### rBV

> Question : how is define recurrence (at week 5, week 12) ? The participant must have been cured between "after MTZ" and week 5 (12) ? 

```{r}
# Active arms vs. placebo, 
# at 5 weeks recurrence was 33% vs. 67% (p = 0.05) -> OK 
# at 12 weeks recurrence was 44% vs. 70% (p = 0.13) -> ?

# nugent_score |> 
#   filter(visit_code != "0000") |>  # remove visit 0 
#   group_by(pid) |> 
#   mutate(n_cured = sum(!nugent_positive, na.rm = TRUE)) |> 
#   ungroup() |> 
#   filter(visit_code == "1500", active_arm) |> 
#   dplyr::count(nugent_positive, n_cured)
```

#### qPCR


(To remove?) 

2. At least a strain detected with > 10^7 copie per swab  

We analyzed the `qPCR` SummarizedExperiment from the MAE. For each LBP strain, we used the variable `copies_per_swab_med` (the median across technical replicates) to define a binary outcome (`outcome`), which is set to TRUE when the strain was detected above 10^7 copies per swab.

We then summarized this information at the participant × visit level: the variable `detected` is set to TRUE if any LBP strain was detected above the threshold at that visit.

```{r}

detected_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["qPCR"]] |> 
      as_tibble() |> 
      select(.sample, .feature, copies_per_swab_med) |> 
      filter(.feature != "16S") |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) 
  ) |> 
  mutate(outcome = ifelse(copies_per_swab_med > 1e7, TRUE, FALSE)) |> 
  group_by(arm, pid, visit_code) |>
  summarise(detected = any(outcome, na.rm = TRUE), .groups = "drop")

```

Finally, we restricted the analysis to participants randomized to an active arm (i.e., excluding placebo) and counted the number of participants with at least one LBP strain detected at visits 1300 and 2120.

```{r}

detected_qPCR |> 
  filter(visit_code %in% c("1200","2120")) |> # C'est stupide, mais V3, c'est 1200 
  filter(arm != "Pl") |> 
  group_by(visit_code) |>
  summarise(
    n    = sum(detected),
    tot_participant = n_distinct(pid),
    .groups = "drop"
  )

```



3. Total of LBP strains detected with > 10^7 copie per swab

We analyzed the `qPCR` SummarizedExperiment from the MAE. For each LBP strain, we used the variable `copies_per_swab_med` (the median across technical replicates) to calculate the total copies per swab for LBP strains per sample (`tot_copie_swab`). 

We then summarized this information at the participant × visit level: the variable `detected` is set to TRUE if `tot_copie_swab` was above 10^7 at that visit.


```{r}

detected_qPCR_bis <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["qPCR"]] |> 
      as_tibble() |> 
      select(.sample, .feature, copies_per_swab_med) |> 
      filter(.feature != "16S") |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) 
  ) |> 
  group_by(arm, mITT, pid, visit_code) |> 
  summarise(tot_copie_swab = sum(copies_per_swab_med, na.rm = TRUE),  
            detected = tot_copie_swab > 1e7, 
            .groups = "drop") 

```

```{r}

detected_qPCR_bis |> 
  filter(visit_code %in% c("1200","2120")) |> # C'est stupide, mais V3, c'est 1200 
  filter(arm != "Pl") |> 
  group_by(visit_code) |>
  summarise(
    n    = sum(detected),
    tot_participant = n_distinct(pid),
    .groups = "drop"
  )


```



### 10/09/2025

#### Staining analyses 

Take information directly in `participant_crfs_merged` and not through the crf 

```{r}
applicator_returned <- 
  metadata(mae)$crf_data_clean$crf23 |> 
  as_tibble() |> 
  select(uid, pid, visit_code, study_day, used_applicators, number_applicators) |> 
  dplyr::rename(
    returned_used_applicators = used_applicators,
    number_of_returned_applicators = number_applicators
  )

applicator_stained <- 
  metadata(mae)$crf_data_clean$crf46 |> 
  as_tibble() |> 
  select(-dfseq, -vdate_fixed)


study_product <- 
  mae@colData |> 
  as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    exposures,  
    by = "pid"
  ) |>
  group_by(pid) |>
  summarize(
    n_product_doses = sum(study_product |> as.integer(), na.rm = TRUE),
    n_product_doses_PP = sum(study_product_PP, na.rm = TRUE),
    comments_studyproduct = str_c(comments_studyproduct[!is.na(comments_studyproduct)], collapse = "; "),
    .groups = "drop"
  ) 

applicator <-
  mae@colData |> as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(applicator_returned, by = c("pid")) |>
  left_join(
    applicator_stained |> select(-ends_with("_control")),
    by = c("uid", "pid", "visit_code", "study_day")
  ) |>
  left_join(study_product, by = "pid") 
```

#### Time since last dose 

```{r}

study_product <-
  mae@colData |>
  as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(
    exposures |> select(pid, visit_code, study_product),
  by = "pid"
  ) |>
  left_join(
    metadata(mae)$crf_data_clean$crf32 |>as_tibble(),
    by = (c("pid", "visit_code"))) |>
  dplyr::rename(
    study_day_product = study_day,
    visit_code_product = visit_code
  ) |> 
  select(-vaginal_swab_collection_time)

```

#### nugent score 

```{r}
nugent_score <- 
  mae@colData |> as_tibble() |> 
  select(uid, pid, visit_code, study_day, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    metadata(mae)$crf_data_clean$crf14 |> 
      as_tibble() |> 
      select(uid, nugent_total_score)
  ) |> 
  group_by(visit_code) |> 
  mutate(any_Nugent = any(!is.na(nugent_total_score))) |> 
  ungroup() |> 
  filter(any_Nugent) |> 
  group_by(pid) |>
  mutate(
    active_arm = ifelse(arm != "Pl", TRUE, FALSE), 
    nugent_positive = ifelse(nugent_total_score >= 7, TRUE, FALSE)
  ) |> 
  ungroup()
```

### 08/09/2025

#### LBP detection at week3 qPCR

See "When using a more sensitive qPCR, we detected LBP strains at  > 107 copies/swab in YY/71 exposed people at V3, the week after product cessation, and YY/71 exposed people at V9, 12 weeks after product use"

We use the `col_LBP_qPCR` SE, we filter for randomized and mITT participant. Then we filter for colonized **at** and visit 1300. 

```{r}

wcol_at_week3_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1300", .feature == "colonized_LBP_at_qpcr")
  ) |> 
  mutate(LBP_colonization_at_week3 = outcome |> replace_na(FALSE))
  


```

We select participant in active arm (e.g. exclude the Placebo arm) and count the number of participant that had detected LBP at week 3 (visit 1300)

```{r}

col_at_week3_qPCR |> 
  filter(arm != "Pl") |> 
  dplyr::count(LBP_colonization_at_week3) |> 
  gt()

```

```{r}

col_at_week12_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "2120", .feature == "colonized_LBP_at_qpcr")
  ) |> 
  mutate(LBP_colonization_at_week12 = outcome |> replace_na(FALSE))
```

```{r}

col_at_week12_qPCR |> 
  filter(arm != "Pl") |> 
  dplyr::count(LBP_colonization_at_week12) |> 
  gt()

```

### 21/08 Participants still colonized by week 12

#### All arms 

##### By site and arm

```{r}

summary_col_still_col <-
  col_still_col |> 
  filter(LBP_colonization_by_week5) |>
  group_by(site, arm) |> 
  summarize(
    n = n(),  # total with colonization at week 5
    n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
    .groups = "drop"
  ) |> 
  mutate(
    p_col_stil_col = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

```



Table of colonization at week 12 among participants colonized by week 5 (by site and arm)

```{r}

table_still_col <- 
  summary_col_still_col |> 
  mutate(
    N_per_site_and_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p_col_stil_col * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    site, arm, N_per_site_and_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(site, arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_site_and_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(site, name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


# table_still_col |> 
#   group_by(site) |> 
#   gt(caption = "Colonization at week 12 among\nparticipant colonized by week 5 by arm and site", row_group_as_column = TRUE) |> 
#   cols_width(
#     "name" ~ px(200),
#     everything() ~ px(120)
#   ) |> 
#   cols_label(
#     name = "",
#     # Blinded = "All blinded arms",
#     Pl = "Placebo",
#     `LC-106-7` = "LC-106<br>7 days",
#     `LC-106-3` = "LC-106<br>3 days",
#     `LC-106-o` = "LC-106<br>overlap",
#     `LC-115` = "LC-115<br>7 days",
#     .fn = md
#   )

table_still_col_by_site <- table_still_col

```

##### By arm

```{r}

summary_table_still_col <-
  col_still_col |> 
  filter(LBP_colonization_by_week5) |>
  group_by(arm) |> 
  summarize(
    n = n(),  # total with colonization at week 5
    n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
    .groups = "drop"
  ) |> 
  mutate(
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

table_still_col <- 
  summary_table_still_col |> 
  mutate(
    N_per_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    arm, N_per_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


# table_still_col |> 
#   gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
#   cols_width(
#     "name" ~ px(200),
#     everything() ~ px(120)
#   ) |> 
#   cols_label(
#     name = "",
#     # Blinded = "All blinded arms",
#     Pl = "Placebo",
#     `LC-106-7` = "LC-106<br>7 days",
#     `LC-106-3` = "LC-106<br>3 days",
#     `LC-106-o` = "LC-106<br>overlap",
#     `LC-115` = "LC-115<br>7 days",
#     .fn = md
#   )

```

```{r}

bind_rows(
table_still_col_by_site,
table_still_col |> mutate(site = "Both")
) |> 
  group_by(site) |> 
  gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    # Blinded = "All blinded arms",
    Pl = "Placebo",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```



##### Overall

Overall colonization at week 12 among participants colonized by week 5

```{r}
#| eval: false

col_still_col |> 
  filter(LBP_colonization_by_week5) |> 
  summarise(
    n = n(),
    n_success = sum(LBP_colonization_at_week12),
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  ) |> 
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(n, n_success, pct, CI_text) |> 
  gt(caption = "Colonization in all arms", row_group_as_column = TRUE) |> 
  cols_label(
    n = "N participants colonized by week 5",
    n_success = "n (%) participants still colonized at week 12",
    pct = "Percentage (n/N)",
    CI_text = "95% CI"
  )

```

By arm & overall 

```{r}

table_still_col <- 
  summary_table_still_col |> 
  bind_rows(
    tibble(
      arm = "Total", 
      n = sum(summary_table_still_col$n), 
      n_success = sum(summary_table_still_col$n_success), 
      p = n_success/n, 
      CI = binom::binom.confint(n_success, n, method = "exact")
    )
  ) |> 
  mutate(
    N_per_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    arm, N_per_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants still colonized at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


table_still_col |> 
  gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    # Blinded = "All blinded arms",
    Pl = "Placebo",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```


#### Active arms 

##### By site and arm

```{r}

summary_col_still_col <-
  col_still_col |> 
  filter(LBP_colonization_by_week5) |>
  filter(arm != "Pl") |> 
  group_by(site, arm) |> 
  summarize(
    n = n(),  # total with colonization at week 5
    n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
    .groups = "drop"
  ) |> 
  mutate(
    p_col_stil_col = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

```

Plot (Figure 3b)

```{r}
#| fig-height: 7.5
#| fig-width: 12

g_long_terme_col <- 
  summary_col_still_col |> 
    ggplot() +
    aes(x = arm, y = p_col_stil_col, col = site) +
    geom_linerange(
      aes(ymin = CI$lower, ymax = CI$upper), 
      linewidth = 2, alpha = 0.5, lineend = "round",
      width = 0.3, position = position_dodge(width = 0.5), 
      show.legend = FALSE
      ) +
    geom_point(position = position_dodge(width = 0.5), size = 3) +
    scale_color_manual("Study site", values = site_colors) +
    xlab("") + 
    ylab("Proportion of participants colonized \nby week 5 with LBP strain detected \nat week 12") +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

g_long_terme_col

```


Table of colonization at week 12 among participants colonized by week 5 (by site and arm)

```{r}

table_still_col <- 
  summary_col_still_col |> 
  mutate(
    N_per_site_and_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p_col_stil_col * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    site, arm, N_per_site_and_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(site, arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_site_and_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(site, name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


table_still_col |> 
  group_by(site) |> 
  gt(caption = "Colonization at week 12 among\nparticipant colonized by week 5 by arm and site", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```

##### By arm

```{r}

summary_table_still_col <-
  col_still_col |> 
  filter(LBP_colonization_by_week5) |>
  group_by(arm) |> 
  summarize(
    n = n(),  # total with colonization at week 5
    n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
    .groups = "drop"
  ) |> 
  mutate(
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

table_still_col <- 
  summary_table_still_col |> 
  mutate(
    N_per_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    arm, N_per_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


table_still_col |> 
  gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```

##### Overall 

Overall colonization at week 12 among participants colonized by week 5

```{r}
#| eval: false

col_still_col |> 
  filter( arm != "Pl") |> 
  filter(LBP_colonization_by_week5) |> 
  summarise(
    n = n(),
    n_success = sum(LBP_colonization_at_week12),
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  ) |> 
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%–", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(n, n_success, pct, CI_text) |> 
  gt(caption = "Colonization in active arms") |> 
  cols_label(
    n = "N participants \n colonized by week 5",
    n_success = "n (%) participants still colonized at week 12",
    pct = "Percentage",
    CI_text = "95% CI"
  )

```


By arm & overall 

```{r}

tmp <- 
  summary_table_still_col |> 
  filter(arm != "Pl")

table_still_col <- 
  tmp |> 
  filter(arm != "Pl") |> 
  bind_rows(
    tibble(
      arm = "Total", 
      n = sum(tmp$n), 
      n_success = sum(tmp$n_success), 
      p = n_success/n, 
      CI = binom::binom.confint(n_success, n, method = "exact")
    )
  ) |> 
  mutate(
    N_per_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    arm, N_per_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants still colonized at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


table_still_col |> 
  gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```


### 21/05 Staining analyses


```{r}

applicator |> 
  group_by(pid) |> 
  summarise(
    used_applicators_returned = ifelse(any(returned_used_applicators == "Yes", na.rm = TRUE), "Yes", "No"),
    applicator_stained = ifelse(any(!is.na(total_applicators_stained)), "Yes", "No"),
    .groups = "drop"
  )|> 
  dplyr::count(used_applicators_returned, applicator_stained) |> 
  mutate(
    prop = round(n / sum(n), 3)
  ) |> 
  gt() |> 
  cols_label(
    used_applicators_returned = "Used applicators returned",
    applicator_stained = "Applicator stained",
    n = "N participants",
    prop = "Percentage"
  )
  
```

```{r}
applicator |> 
  dplyr::count(returned_used_applicators) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt()
```


```{r}
applicator |> 
  filter(returned_used_applicators == "Yes") |> 
  dplyr::count(total_applicators_stained == 0|is.na(total_applicators_stained)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt()
  
```



>Done for mITT, is it ok ?

- Proportion of participants that returned applicators (0.933)
- Proportion of participants with returned applicators for which the staining analysis was done (0.988)


##### Among those who brought in at leat 7 applicator

::: callout-caution
The variable `number_applicator` is defined as the number of **used** applicators returned.  
If a participant brings back 5 used applicators and 2 unused applicators, would the `number_applicator` variable be 5 or 7?  
Currently, we assume that it will be 7.
:::

- Proportion of participants that returned applicators (0.933)
- Proportion of participants with returned applicators for which the staining analysis was done (0.988)

```{r}

applicator |> 
  filter(number_applicators >= 7) |> 
  group_by(pid) |> 
  summarise(
    used_applicators_returned = ifelse(any(used_applicators == "Yes", na.rm = TRUE), "Yes", "No"),
    applicator_stained = ifelse(any(!is.na(total_applicators_stained)), "Yes", "No"),
    .groups = "drop"
  )|> 
  dplyr::count(used_applicators_returned, applicator_stained) |> 
  mutate(
    prop = round(n / sum(n), 3)
  ) |> 
  gt() |> 
  cols_label(
    used_applicators_returned = "Used applicators returned",
    applicator_stained = "Applicator stained",
    n = "N participants",
    prop = "Percentage"
  )
  
```

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  dplyr::count(used_applicators) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt()
```


```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  filter(used_applicators == "Yes") |> 
  dplyr::count(total_applicators_stained == 0|is.na(total_applicators_stained)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt()
  
```

#### Staining analysis 

##### mITT 

Concordance between self-reports and applicator staining:

- scatter plot of # of self-reported doses vs # of positive staining

```{r}

applicator |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive) |>
  ggplot(aes(x = n_product_doses , 
             y = applicator_stain_positive, 
             fill = n)) + 
  geom_tile() +
  geom_text(aes(label = n), size = 3) +
  scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none") +
  xlab("Number of doses taken") +
  ylab("Positive applicator (n)")

```

```{r}

applicator |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  ggplot(aes(x = n_product_doses, y = applicator_stain_positive, col = n_product_doses |> as.factor())) + 
  geom_point() + 
  geom_jitter(width = 0.2, height = 0.2) + 
  labs(x = "Number of study product doses", 
       y = "Number of applicator stained positive") + 
  guides(col = "none")
```


- Number of participants that self-reported using at least one dose (= XX) (90)
- Number of participants that had at least one positive staining (= YY) (82)

```{r}
applicator |> 
  dplyr::count(n_product_doses) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    n_product_doses = "Number of study product doses taken"
  )
```


```{r}
applicator |> 
  dplyr::count(applicator_stain_positive > 1) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `applicator_stain_positive > 1` = "More than 1 applicator stained positive"
  )
```


+ contingency table of self-reported doses and positive staining (ok)

- Proportion of participants self-reported using at least one dose **and** have at least one positive staining  (= ZZ/XX) (=82)

```{r}
applicator |> 
  dplyr::count((applicator_stain_positive > 1&n_product_doses>1)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `(applicator_stain_positive > 1 & n_product_doses > 1)` = "More than 1 applicator stained positive and more than 1 product doses taken"
  )
```

###### Among those who brought in at least 7 applicators

Concordance between self-reports and applicator staining:

- scatter plot of # of self-reported doses vs # of positive staining

```{r}

applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive) |>
  ggplot(aes(x = n_product_doses |> as.factor(), 
             y = applicator_stain_positive, 
             fill = n)) + 
  geom_tile() +
  geom_text(aes(label = n), size = 3) +
  scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none") +
  xlab("Number of doses taken") +
  ylab("Positive applicator (n)") + 
  ggtitle("Among participants who brought in at least 7 applicators")

```

```{r}
#| eval: false 

applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  ggplot(aes(x = n_product_doses |> as.factor(), 
             y = applicator_stain_positive, 
             col = n_product_doses |> as.factor())) + 
  geom_point() + 
  geom_jitter(width = 0.2, height = 0.2) + 
  labs(x = "Number of study product doses", 
       y = "Number of applicator stained positive") + 
  guides(col = "none") + 
  ggtitle("Among participants who brought in at least 7 applicators")

```

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing"), 
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive) |>
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() 
```

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive_group = 
    case_when(
        applicator_stain_positive >= 7 ~ "100% (>=7)",
        applicator_stain_positive == 6 ~ "80% (6)", 
        applicator_stain_positive > 3 & applicator_stain_positive < 6 ~ "50-80% (4-5)", 
        applicator_stain_positive == 0 ~ "0% (0)", 
        TRUE ~ "ERROR"
    ), 
    applicator_stain_positive_group = factor(
      applicator_stain_positive_group,
      levels = c("100% (>=7)", "80% (6)","50-80% (4-5)", "0% (0)")
    )
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive_group) |>
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() 
```

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive_group = 
    case_when(
        applicator_stain_positive >= 7 ~ "100% (>=7)",
        applicator_stain_positive >= 6 ~ ">80% (>=6)", 
        applicator_stain_positive >= 3 ~ ">50% (>=4)", 
        applicator_stain_positive == 0 ~ ">0% (>=0)", 
        TRUE ~ "ERROR"
    ), 
    applicator_stain_positive_group = factor(
      applicator_stain_positive_group,
      levels = c("100% (>=7)", ">80% (>=6)",">50% (>=4)", ">0% (>=0)")
    )
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive_group) |>
  mutate(
    prop = round(n / sum(n), 3), 
    prop_cum = cumsum(prop), 
    n_cum = cumsum(n)) |>
  select(-n, -prop) |> 
  gt() 
```


- Number of participants that self-reported using at least one dose (= XX) (90)
- Number of participants that had at least one positive staining (= YY) (82)

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  dplyr::count(n_product_doses) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    n_product_doses = "Number of study product doses taken"
  ) |> 
  tab_header(title = "Among those who brought in at least 7 applicators")

```


```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  dplyr::count(applicator_stain_positive > 1) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `applicator_stain_positive > 1` = "More than 1 applicator stained positive"
  ) |> 
  tab_header(title = "Among those who brought in at least 7 applicators")

```


+ contingency table of self-reported doses and positive staining (ok)

- Proportion of participants self-reported using at least one dose **and** have at least one positive staining  (= ZZ/XX) (=82)

```{r}

applicator |> 
  filter(number_applicators >= 7) |> 
  dplyr::count((applicator_stain_positive > 1&n_product_doses>1)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `(applicator_stain_positive > 1 & n_product_doses > 1)` = "More than 1 applicator stained positive and more than 1 product doses taken"
  ) |> 
  tab_header(title = "Among those who brought in at least 7 applicators")
  
```


##### PP (to check later)

-> est ce que je dois filtrer PP avant ? Les resultats ne sont pas les mêmes

Same but with at least 6 doses

Concordance between self-reports and applicator staining:

- scatter plot of # of self-reported doses vs # of positive staining

```{r}


applicator |> 
filter(PP) |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing"),
    n_product_doses = n_product_doses |> as.factor()
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive) |>
  ggplot(aes(x=n_product_doses , 
             y=applicator_stain_positive, 
             fill = n)) + 
  geom_tile() +
  geom_text(aes(label = n), size = 3) +
  scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none") +
  xlab("Number of doses taken") +
  ylab("Positive applicator (n)")

```

```{r}


applicator |>
  filter(PP) |>
  mutate(
    applicator_stain_positive =
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |>     replace_na("Missing")
  ) |>
  ggplot(
    aes(
      x = n_product_doses |> as.factor(),
      y = applicator_stain_positive,
      col = n_product_doses |> as.factor()
  )
  ) +
  geom_point() +
  geom_jitter(width = 0.2, height = 0.2) + 
  labs(x = "Number of study product doses", 
       y = "Number of applicator stained positive") + 
  guides(col = "none")


```

- Number of participants that self-reported using at least six dose (= XX) (85)
- Number of participants that had at least six positive staining (= YY) (61)

```{r}
applicator |> 
  filter(PP) |> 
  dplyr::count(n_product_doses) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    n_product_doses = "Number of study product taken"
  )
```


```{r}
applicator |> 
  filter(PP) |> 
  dplyr::count(applicator_stain_positive > 6) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `applicator_stain_positive > 6` = "More than 6 applicator stained positive"
  )
```


+ contingency table of self-reported doses and positive staining (ok)

- Proportion of participants self-reported using at least six dose **and** have at least six positive staining  (= ZZ/XX) (=59)

```{r}
applicator |>
  filter(PP) |> 
  dplyr::count((applicator_stain_positive > 6&n_product_doses>6)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() 
```


### 08/08 Time since last dose in 7-days active arms (LC-106-7, LC-115)

Without filtering for last doses taken on the same day as the the v2

```{r}
#| eval: true

study_product <-
  mae@colData |>
  as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(
    exposures |> select(pid, visit_code, study_product),
  by = "pid"
  ) |>
  left_join(
    metadata(mae)$crf_data_clean$crf32 |>as_tibble(),
    by = (c("pid", "visit_code"))) |>
  dplyr::rename(
    study_day_product = study_day,
    visit_code_product = visit_code
  ) |> 
  select(-vaginal_swab_collection_time)


# study_day visit 2 in person
# ! pid 068100026 appear 2 times ! -> remove using filter(!is.na(study_day_visit2))
visit2_studyday <- 
  metadata(mae)$visits_crfs_merged |> 
  as_tibble() |> 
  select(pid, visit_code, study_day) |> 
  distinct() |> 
  filter(visit_code == "1200") |> 
  dplyr::rename(
    study_day_v2 = study_day
  ) |> 
  dplyr::filter(!is.na(study_day_v2))
  
study_prod_time <- 
  study_product |> 
  filter(arm != "Pl") |> 
  left_join(visit2_studyday |> select(-visit_code), by = "pid") |> 
  group_by(pid) |> 
  filter(study_product =="1") |> 
  filter(study_day_product <= study_day_v2) |>  # only consider doses taken before v2
  arrange(study_day_product) |> 
  slice_tail(n = 1) |>              
  ungroup() 

# create category 
study_prod_time <- 
  study_prod_time |> 
  mutate(last_dose = case_when(
    study_day_product == study_day_v2 ~ "same day", 
    study_day_product == study_day_v2-1 ~ "day before", 
    study_day_product < study_day_v2-1~ "more than one day"
  ), 
  last_dose = factor(last_dose, levels = c("same day", "day before", "more than one day")))

```

Table

```{r}

study_prod_time |> 
  dplyr::count(last_dose) |> 
  gt()

```

```{r}

study_prod_time |> 
  group_by(site, arm, last_dose) |> 
  summarize(
    n = n(),  
    .groups = "drop"
  ) |> 
  ungroup() |> 
  pivot_wider(
    id_cols = c(site, last_dose), 
    names_from = arm,
    values_from = n, values_fill = 0
  ) |> 
  group_by(site) |> 
  gt()
```

### 08/08 Time since last dose in 7-days active arms (LC-106-7, LC-115)

We compute this time based on self-reported time of last study product use (daily - CRF plate 32/33) -\> date/time of last study product = use the crf 32/33 `visit_day` + answer to when? (early morning, etc.) -\> swab time = use `study_day` of the weekly visit.

To compute the time between the last dose taken prior to the in-person visit at week 2, we use information from three sources: crf32 for the time of insertion of the study product, the exposure table for the date of the last dose, and the visits_crfs_merged table for the study day of the week 2 in-person visit.

To better estimate this time interval, we combine the `study_day` (which reflects the calendar day of product use) with `insertion_study_product_time` to account for the time of day the product was inserted. Specifically, we convert the reported insertion window into a fractional day value and add it to the study day, as follows:

-   Before 6am: 0.125
-   Early morning (6–9am): 0.25
-   Late morning (9–12pm): 0.4375
-   Early afternoon (12–3pm): 0.5625
-   Late afternoon (3–6pm): 0.6875
-   Evening (6–9pm): 0.8125
-   Late evening (9pm–midnight): 0.9375

For the week 2 in-person visit, we also assume it occurred during the day (rather than at midnight), so we add 0.5 to the visit's study_day to reflect a likely early afternoon visit time.

```{r}
#| eval: true

study_product <-
  mae@colData |>
  as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(
    exposures |> select(pid, visit_code, study_product),
  by = "pid"
  ) |>
  left_join(
    metadata(mae)$crf_data_clean$crf32 |>as_tibble(),
    by = (c("pid", "visit_code"))) |>
  dplyr::rename(
    study_day_product = study_day,
    visit_code_product = visit_code
  ) |>
  mutate(
    study_day_product_frac =
      dplyr::case_when(
        insert_study_product_time == "Before 6am" ~ study_day_product + 0.125,
        insert_study_product_time == "Early morning (6am-9am)" ~ study_day_product + 0.3125,
        insert_study_product_time == "Late morning (9am-12pm)" ~ study_day_product + 0.4375,
        insert_study_product_time == "Early afternoon (12pm-3pm)" ~ study_day_product + 0.5625,
        insert_study_product_time == "Late afternoon (3pm-6pm)" ~ study_day_product + 0.6875,
        insert_study_product_time == "Evening (6pm-9pm)" ~ study_day_product + 0.8125,
        insert_study_product_time == "Late evening (9pm-midnight)" ~ study_day_product + 0.9375,
        TRUE ~ study_day_product
           )
    )


# study_day visit 2 in person
# ! pid 068100026 appear 2 times ! -> remove using filter(!is.na(study_day_visit2))
visit2_studyday <- 
  metadata(mae)$visits_crfs_merged |> 
  as_tibble() |> 
  select(pid, visit_code, study_day) |> 
  distinct() |> 
  filter(visit_code == "1200") |> 
  dplyr::rename(
    study_day_v2 = study_day
  ) |> 
  dplyr::filter(!is.na(study_day_v2)) |> 
  mutate(
    study_day_v2 = study_day_v2 + 0.5 # this assumes that the visit happened at noon (We don't think we have data/information about the time of visit)
  )

study_prod_time <- 
  study_product |> 
  left_join(visit2_studyday |> select(-visit_code), by = "pid") |> 
  group_by(pid) |> 
  filter(study_product =="1") |> 
  filter(study_day_product_frac <= study_day_v2) |>  # we only consider doses that were taken before the visit 2
  arrange(study_day_product_frac) |> 
  slice_tail(n = 1) |>              
  ungroup() 


# filter for participant in LC-106-7 and LC-115 and compute the difference in time
study_prod_time <- 
  study_prod_time |> 
  filter(arm %in% c("LC-106-7", "LC-115")) |> 
  mutate(
    time_between_final_dose_and_v2 = study_day_v2 - study_day_product_frac
  )

```

```{r}
#| eval: true

# mean and CI of time_between_final_dose_and_visit2 by arm
study_prod_time |> 
  group_by(arm) |> 
  summarise(
    mean_time = mean(time_between_final_dose_and_v2, na.rm = TRUE),
    mean_hours = mean_time * 24, # convert to hours
    median_time = median(time_between_final_dose_and_v2, na.rm = TRUE),
    median_hours = median_time * 24, # convert to hours
    sd_time = sd(time_between_final_dose_and_v2, na.rm = TRUE),
    sd_hours = sd_time * 24, # convert to hours
    n = n(),
    CI = list(DescTools::MeanCI(time_between_final_dose_and_v2, conf.level = 0.95, na.rm = TRUE))
  ) |> 
  mutate(
    CI_text = str_c("(", round(map_dbl(CI, ~ .x[2]), 2), "-", round(map_dbl(CI, ~ .x[3]), 2), ")"),
    CI_hours = str_c("(", round(map_dbl(CI, ~ .x[2] * 24), 2), "-", round(map_dbl(CI, ~ .x[3] * 24), 2), ")")
  ) |>
  select(arm,n, median_hours, mean_hours, sd_hours, CI_hours) |> 
  gt() |> 
  gt::cols_label(
    arm = "Arm",
    n = "N mITT participants",
    median_hours = "Median time between final dose and visit 2 (hours)",
    mean_hours = "Mean time between final dose and visit 2 (hours)",
    sd_hours = "Standard deviation (hours)",
    CI_hours = "95% CI (hours)"
  )

```

```{r}
#| fig-height: 6
#| fig-width: 8

study_prod_time |> 
  ggplot() + 
  aes(x = time_between_final_dose_and_v2 * 24, y = pid) +
  geom_point() + 
  geom_vline(xintercept = c(24, 48, 72, 96), linetype = "dashed", color = "steelblue") +
  scale_x_continuous(
    breaks = seq(0, 24 * 4, by = 12),  
    name = "Time between final dose and visit 2 (hours)"
  ) +
  facet_grid(site + arm ~ ., scales = "free_y", space = "free_y")

```
