---
title: "Purgatory"
format: html
editor: source
---

# 03 secondary outcomes

### 08/08 Microbiota trajectory

```{r}
g_trajectories <-
  rel_abs_agg |>
  filter(mITT, randomized != 0, PIPV, !poor_quality_mg_data) |>
  group_by(pid) |> 
  mutate(
    tot_LC115 = sum(rel_ab[LBP == "LC-115"]),
    tot_LBP = sum(rel_ab[!is.na(LBP)])
    ) |> 
  ungroup() |> 
  arrange(desc(PP), -tot_LC115, -tot_LBP) |> 
  mutate(
    pid = pid |> fct_inorder(),
    visit_label = ifelse(visit != "screening", str_c(visit, " (W", study_week, ")"), visit |> as.character()) |> fct_reorder(visit |> as.numeric()),
    ) |> 
  ggplot(aes(y = rel_ab, x = pid, fill = taxon, alpha = ifelse(PP, "PP", "mITT"))) +
  geom_col() +
  facet_grid(visit_label ~ arm + site, scales = "free", space = "free") +
  scale_fill_manual(
    values = get_taxa_colors(rel_abs_agg$taxon |> levels()),
    labels = get_taxa_labels(rel_abs_agg$taxon |> levels()),
    guide = guide_legend(ncol = 1)
    ) +
  scale_alpha_discrete("Population", range = c(0.5, 1)) +
  scale_y_continuous(
    "relative abundance", labels = scales::percent,
    breaks = seq(0, 0.5, by = 0.5), minor_breaks = seq(0, 1, by = 0.25)
  ) +
  scale_x_discrete("Participants") +
  theme(
    strip.text.y = element_text(angle = 0, hjust = 0),
    strip.text.x = element_text(angle = 90, hjust = 0),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )
```

# 04 - supplementary analyses


### 08/09/2025

#### LBP detection at week3 qPCR

See "When using a more sensitive qPCR, we detected LBP strains at  > 107 copies/swab in YY/71 exposed people at V3, the week after product cessation, and YY/71 exposed people at V9, 12 weeks after product use"

We use the `col_LBP_qPCR` SE, we filter for randomized and mITT participant. Then we filter for colonized **at** and visit 1300. 

```{r}

wcol_at_week3_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "1300", .feature == "colonized_LBP_at_qpcr")
  ) |> 
  mutate(LBP_colonization_at_week3 = outcome |> replace_na(FALSE))
  


```

We select participant in active arm (e.g. exclude the Placebo arm) and count the number of participant that had detected LBP at week 3 (visit 1300)

```{r}

col_at_week3_qPCR |> 
  filter(arm != "Pl") |> 
  dplyr::count(LBP_colonization_at_week3) |> 
  gt()

```

```{r}

col_at_week12_qPCR <-
  mae@colData |> as_tibble() |> 
  select(pid, site, randomized, arm, ITT, mITT, PP) |> 
  distinct() |> 
  filter(randomized, mITT) |> 
  left_join(
    mae[["col_LBP_qPCR"]] |> 
      as_tibble() |> 
      dplyr::left_join(
        mae@colData |> as_tibble() |> select(uid, pid, visit_code),
        by = join_by(.sample == uid)
      ) |> 
      dplyr::filter(visit_code == "2120", .feature == "colonized_LBP_at_qpcr")
  ) |> 
  mutate(LBP_colonization_at_week12 = outcome |> replace_na(FALSE))
```

```{r}

col_at_week12_qPCR |> 
  filter(arm != "Pl") |> 
  dplyr::count(LBP_colonization_at_week12) |> 
  gt()

```

### 21/08 Participants still colonized by week 12

#### All arms 

##### By site and arm

```{r}

summary_col_still_col <-
  col_still_col |> 
  filter(LBP_colonization_by_week5) |>
  group_by(site, arm) |> 
  summarize(
    n = n(),  # total with colonization at week 5
    n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
    .groups = "drop"
  ) |> 
  mutate(
    p_col_stil_col = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

```



Table of colonization at week 12 among participants colonized by week 5 (by site and arm)

```{r}

table_still_col <- 
  summary_col_still_col |> 
  mutate(
    N_per_site_and_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p_col_stil_col * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    site, arm, N_per_site_and_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(site, arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_site_and_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(site, name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


# table_still_col |> 
#   group_by(site) |> 
#   gt(caption = "Colonization at week 12 among\nparticipant colonized by week 5 by arm and site", row_group_as_column = TRUE) |> 
#   cols_width(
#     "name" ~ px(200),
#     everything() ~ px(120)
#   ) |> 
#   cols_label(
#     name = "",
#     # Blinded = "All blinded arms",
#     Pl = "Placebo",
#     `LC-106-7` = "LC-106<br>7 days",
#     `LC-106-3` = "LC-106<br>3 days",
#     `LC-106-o` = "LC-106<br>overlap",
#     `LC-115` = "LC-115<br>7 days",
#     .fn = md
#   )

table_still_col_by_site <- table_still_col

```

##### By arm

```{r}

summary_table_still_col <-
  col_still_col |> 
  filter(LBP_colonization_by_week5) |>
  group_by(arm) |> 
  summarize(
    n = n(),  # total with colonization at week 5
    n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
    .groups = "drop"
  ) |> 
  mutate(
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

table_still_col <- 
  summary_table_still_col |> 
  mutate(
    N_per_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    arm, N_per_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


# table_still_col |> 
#   gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
#   cols_width(
#     "name" ~ px(200),
#     everything() ~ px(120)
#   ) |> 
#   cols_label(
#     name = "",
#     # Blinded = "All blinded arms",
#     Pl = "Placebo",
#     `LC-106-7` = "LC-106<br>7 days",
#     `LC-106-3` = "LC-106<br>3 days",
#     `LC-106-o` = "LC-106<br>overlap",
#     `LC-115` = "LC-115<br>7 days",
#     .fn = md
#   )

```

```{r}

bind_rows(
table_still_col_by_site,
table_still_col |> mutate(site = "Both")
) |> 
  group_by(site) |> 
  gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    # Blinded = "All blinded arms",
    Pl = "Placebo",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```



##### Overall

Overall colonization at week 12 among participants colonized by week 5

```{r}
#| eval: false

col_still_col |> 
  filter(LBP_colonization_by_week5) |> 
  summarise(
    n = n(),
    n_success = sum(LBP_colonization_at_week12),
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  ) |> 
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%â€“", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(n, n_success, pct, CI_text) |> 
  gt(caption = "Colonization in all arms", row_group_as_column = TRUE) |> 
  cols_label(
    n = "N participants colonized by week 5",
    n_success = "n (%) participants still colonized at week 12",
    pct = "Percentage (n/N)",
    CI_text = "95% CI"
  )

```

By arm & overall 

```{r}

table_still_col <- 
  summary_table_still_col |> 
  bind_rows(
    tibble(
      arm = "Total", 
      n = sum(summary_table_still_col$n), 
      n_success = sum(summary_table_still_col$n_success), 
      p = n_success/n, 
      CI = binom::binom.confint(n_success, n, method = "exact")
    )
  ) |> 
  mutate(
    N_per_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    arm, N_per_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants still colonized at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


table_still_col |> 
  gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    # Blinded = "All blinded arms",
    Pl = "Placebo",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```


#### Active arms 

##### By site and arm

```{r}

summary_col_still_col <-
  col_still_col |> 
  filter(LBP_colonization_by_week5) |>
  filter(arm != "Pl") |> 
  group_by(site, arm) |> 
  summarize(
    n = n(),  # total with colonization at week 5
    n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
    .groups = "drop"
  ) |> 
  mutate(
    p_col_stil_col = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

```

Plot (Figure 3b)

```{r}
#| fig-height: 7.5
#| fig-width: 12

g_long_terme_col <- 
  summary_col_still_col |> 
    ggplot() +
    aes(x = arm, y = p_col_stil_col, col = site) +
    geom_linerange(
      aes(ymin = CI$lower, ymax = CI$upper), 
      linewidth = 2, alpha = 0.5, lineend = "round",
      width = 0.3, position = position_dodge(width = 0.5), 
      show.legend = FALSE
      ) +
    geom_point(position = position_dodge(width = 0.5), size = 3) +
    scale_color_manual("Study site", values = site_colors) +
    xlab("") + 
    ylab("Proportion of participants colonized \nby week 5 with LBP strain detected \nat week 12") +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

g_long_terme_col

```


Table of colonization at week 12 among participants colonized by week 5 (by site and arm)

```{r}

table_still_col <- 
  summary_col_still_col |> 
  mutate(
    N_per_site_and_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p_col_stil_col * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    site, arm, N_per_site_and_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(site, arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_site_and_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(site, name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


table_still_col |> 
  group_by(site) |> 
  gt(caption = "Colonization at week 12 among\nparticipant colonized by week 5 by arm and site", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```

##### By arm

```{r}

summary_table_still_col <-
  col_still_col |> 
  filter(LBP_colonization_by_week5) |>
  group_by(arm) |> 
  summarize(
    n = n(),  # total with colonization at week 5
    n_success = sum(LBP_colonization_at_week12),  # still colonized at week 12
    .groups = "drop"
  ) |> 
  mutate(
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  )

table_still_col <- 
  summary_table_still_col |> 
  mutate(
    N_per_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    arm, N_per_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants\nwith LBP strain detected at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


table_still_col |> 
  gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```

##### Overall 

Overall colonization at week 12 among participants colonized by week 5

```{r}
#| eval: false

col_still_col |> 
  filter( arm != "Pl") |> 
  filter(LBP_colonization_by_week5) |> 
  summarise(
    n = n(),
    n_success = sum(LBP_colonization_at_week12),
    p = n_success / n,
    CI = binom::binom.confint(n_success, n, method = "exact")
  ) |> 
  mutate(
    pct = round(p * 100, 1),
    CI_text = str_c("(", round(CI$lower * 100, 1), "%â€“", round(CI$upper * 100, 1), "%)")
  ) |> 
  select(n, n_success, pct, CI_text) |> 
  gt(caption = "Colonization in active arms") |> 
  cols_label(
    n = "N participants \n colonized by week 5",
    n_success = "n (%) participants still colonized at week 12",
    pct = "Percentage",
    CI_text = "95% CI"
  )

```


By arm & overall 

```{r}

tmp <- 
  summary_table_still_col |> 
  filter(arm != "Pl")

table_still_col <- 
  tmp |> 
  filter(arm != "Pl") |> 
  bind_rows(
    tibble(
      arm = "Total", 
      n = sum(tmp$n), 
      n_success = sum(tmp$n_success), 
      p = n_success/n, 
      CI = binom::binom.confint(n_success, n, method = "exact")
    )
  ) |> 
  mutate(
    N_per_arm = str_c("N = ", n),
    LBP_strain_detected = str_c(n_success, " (", round(p * 100)," %)"),
    CI_text = str_c(round(CI$lower * 100), "% - ", round(CI$upper * 100), "%")
  ) |> 
  dplyr::select(
    arm, N_per_arm, LBP_strain_detected, CI_text
  ) |> 
  pivot_longer(-c(arm)) |>
  mutate(
    name = 
      case_when(
        name == "N_per_arm" ~ "N participants colonized by week 5",
        name == "LBP_strain_detected" ~ "n (%) participants still colonized at week 12",
        name == "CI_text" ~ "95% CI"
      )
  ) |> 
  pivot_wider(
    id_cols = c(name), 
    names_from = arm,
    values_from = value, values_fill = ""
    )


table_still_col |> 
  gt(caption = "Colonization at week 12 among participant colonized by week 5 by arm", row_group_as_column = TRUE) |> 
  cols_width(
    "name" ~ px(200),
    everything() ~ px(120)
  ) |> 
  cols_label(
    name = "",
    `LC-106-7` = "LC-106<br>7 days",
    `LC-106-3` = "LC-106<br>3 days",
    `LC-106-o` = "LC-106<br>overlap",
    `LC-115` = "LC-115<br>7 days",
    .fn = md
  )

```


### 21/05 Staining analyses


```{r}

applicator |> 
  group_by(pid) |> 
  summarise(
    used_applicators_returned = ifelse(any(returned_used_applicators == "Yes", na.rm = TRUE), "Yes", "No"),
    applicator_stained = ifelse(any(!is.na(total_applicators_stained)), "Yes", "No"),
    .groups = "drop"
  )|> 
  dplyr::count(used_applicators_returned, applicator_stained) |> 
  mutate(
    prop = round(n / sum(n), 3)
  ) |> 
  gt() |> 
  cols_label(
    used_applicators_returned = "Used applicators returned",
    applicator_stained = "Applicator stained",
    n = "N participants",
    prop = "Percentage"
  )
  
```

```{r}
applicator |> 
  dplyr::count(returned_used_applicators) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt()
```


```{r}
applicator |> 
  filter(returned_used_applicators == "Yes") |> 
  dplyr::count(total_applicators_stained == 0|is.na(total_applicators_stained)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt()
  
```



>Done for mITT, is it ok ?

- Proportion of participants that returned applicators (0.933)
- Proportion of participants with returned applicators for which the staining analysis was done (0.988)


##### Among those who brought in at leat 7 applicator

::: callout-caution
The variable `number_applicator` is defined as the number of **used** applicators returned.  
If a participant brings back 5 used applicators and 2 unused applicators, would the `number_applicator` variable be 5 or 7?  
Currently, we assume that it will be 7.
:::

- Proportion of participants that returned applicators (0.933)
- Proportion of participants with returned applicators for which the staining analysis was done (0.988)

```{r}

applicator |> 
  filter(number_applicators >= 7) |> 
  group_by(pid) |> 
  summarise(
    used_applicators_returned = ifelse(any(used_applicators == "Yes", na.rm = TRUE), "Yes", "No"),
    applicator_stained = ifelse(any(!is.na(total_applicators_stained)), "Yes", "No"),
    .groups = "drop"
  )|> 
  dplyr::count(used_applicators_returned, applicator_stained) |> 
  mutate(
    prop = round(n / sum(n), 3)
  ) |> 
  gt() |> 
  cols_label(
    used_applicators_returned = "Used applicators returned",
    applicator_stained = "Applicator stained",
    n = "N participants",
    prop = "Percentage"
  )
  
```

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  dplyr::count(used_applicators) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt()
```


```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  filter(used_applicators == "Yes") |> 
  dplyr::count(total_applicators_stained == 0|is.na(total_applicators_stained)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt()
  
```

#### Staining analysis 

##### mITT 

Concordance between self-reports and applicator staining:

- scatter plot of # of self-reported doses vs # of positive staining

```{r}

applicator |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive) |>
  ggplot(aes(x = n_product_doses , 
             y = applicator_stain_positive, 
             fill = n)) + 
  geom_tile() +
  geom_text(aes(label = n), size = 3) +
  scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none") +
  xlab("Number of doses taken") +
  ylab("Positive applicator (n)")

```

```{r}

applicator |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  ggplot(aes(x = n_product_doses, y = applicator_stain_positive, col = n_product_doses |> as.factor())) + 
  geom_point() + 
  geom_jitter(width = 0.2, height = 0.2) + 
  labs(x = "Number of study product doses", 
       y = "Number of applicator stained positive") + 
  guides(col = "none")
```


- Number of participants that self-reported using at least one dose (= XX) (90)
- Number of participants that had at least one positive staining (= YY) (82)

```{r}
applicator |> 
  dplyr::count(n_product_doses) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    n_product_doses = "Number of study product doses taken"
  )
```


```{r}
applicator |> 
  dplyr::count(applicator_stain_positive > 1) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `applicator_stain_positive > 1` = "More than 1 applicator stained positive"
  )
```


+ contingency table of self-reported doses and positive staining (ok)

- Proportion of participants self-reported using at least one dose **and** have at least one positive staining  (= ZZ/XX) (=82)

```{r}
applicator |> 
  dplyr::count((applicator_stain_positive > 1&n_product_doses>1)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `(applicator_stain_positive > 1 & n_product_doses > 1)` = "More than 1 applicator stained positive and more than 1 product doses taken"
  )
```

###### Among those who brought in at least 7 applicators

Concordance between self-reports and applicator staining:

- scatter plot of # of self-reported doses vs # of positive staining

```{r}

applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive) |>
  ggplot(aes(x = n_product_doses |> as.factor(), 
             y = applicator_stain_positive, 
             fill = n)) + 
  geom_tile() +
  geom_text(aes(label = n), size = 3) +
  scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none") +
  xlab("Number of doses taken") +
  ylab("Positive applicator (n)") + 
  ggtitle("Among participants who brought in at least 7 applicators")

```

```{r}
#| eval: false 

applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing")
  ) |>
  ggplot(aes(x = n_product_doses |> as.factor(), 
             y = applicator_stain_positive, 
             col = n_product_doses |> as.factor())) + 
  geom_point() + 
  geom_jitter(width = 0.2, height = 0.2) + 
  labs(x = "Number of study product doses", 
       y = "Number of applicator stained positive") + 
  guides(col = "none") + 
  ggtitle("Among participants who brought in at least 7 applicators")

```

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing"), 
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive) |>
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() 
```

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive_group = 
    case_when(
        applicator_stain_positive >= 7 ~ "100% (>=7)",
        applicator_stain_positive == 6 ~ "80% (6)", 
        applicator_stain_positive > 3 & applicator_stain_positive < 6 ~ "50-80% (4-5)", 
        applicator_stain_positive == 0 ~ "0% (0)", 
        TRUE ~ "ERROR"
    ), 
    applicator_stain_positive_group = factor(
      applicator_stain_positive_group,
      levels = c("100% (>=7)", "80% (6)","50-80% (4-5)", "0% (0)")
    )
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive_group) |>
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() 
```

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  mutate(
    applicator_stain_positive_group = 
    case_when(
        applicator_stain_positive >= 7 ~ "100% (>=7)",
        applicator_stain_positive >= 6 ~ ">80% (>=6)", 
        applicator_stain_positive >= 3 ~ ">50% (>=4)", 
        applicator_stain_positive == 0 ~ ">0% (>=0)", 
        TRUE ~ "ERROR"
    ), 
    applicator_stain_positive_group = factor(
      applicator_stain_positive_group,
      levels = c("100% (>=7)", ">80% (>=6)",">50% (>=4)", ">0% (>=0)")
    )
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive_group) |>
  mutate(
    prop = round(n / sum(n), 3), 
    prop_cum = cumsum(prop), 
    n_cum = cumsum(n)) |>
  select(-n, -prop) |> 
  gt() 
```


- Number of participants that self-reported using at least one dose (= XX) (90)
- Number of participants that had at least one positive staining (= YY) (82)

```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  dplyr::count(n_product_doses) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    n_product_doses = "Number of study product doses taken"
  ) |> 
  tab_header(title = "Among those who brought in at least 7 applicators")

```


```{r}
applicator |> 
  filter(number_applicators >= 7) |> 
  dplyr::count(applicator_stain_positive > 1) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `applicator_stain_positive > 1` = "More than 1 applicator stained positive"
  ) |> 
  tab_header(title = "Among those who brought in at least 7 applicators")

```


+ contingency table of self-reported doses and positive staining (ok)

- Proportion of participants self-reported using at least one dose **and** have at least one positive staining  (= ZZ/XX) (=82)

```{r}

applicator |> 
  filter(number_applicators >= 7) |> 
  dplyr::count((applicator_stain_positive > 1&n_product_doses>1)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `(applicator_stain_positive > 1 & n_product_doses > 1)` = "More than 1 applicator stained positive and more than 1 product doses taken"
  ) |> 
  tab_header(title = "Among those who brought in at least 7 applicators")
  
```


##### PP (to check later)

-> est ce que je dois filtrer PP avant ? Les resultats ne sont pas les mÃªmes

Same but with at least 6 doses

Concordance between self-reports and applicator staining:

- scatter plot of # of self-reported doses vs # of positive staining

```{r}


applicator |> 
filter(PP) |> 
  mutate(
    applicator_stain_positive = 
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |> replace_na("Missing"),
    n_product_doses = n_product_doses |> as.factor()
  ) |>
  dplyr::count(n_product_doses, applicator_stain_positive) |>
  ggplot(aes(x=n_product_doses , 
             y=applicator_stain_positive, 
             fill = n)) + 
  geom_tile() +
  geom_text(aes(label = n), size = 3) +
  scale_fill_gradient(low = "lightblue1", high = "lightblue4") +
  guides(fill = "none") +
  xlab("Number of doses taken") +
  ylab("Positive applicator (n)")

```

```{r}


applicator |>
  filter(PP) |>
  mutate(
    applicator_stain_positive =
      applicator_stain_positive |> as.factor() |> fct_expand("Missing") |>     replace_na("Missing")
  ) |>
  ggplot(
    aes(
      x = n_product_doses |> as.factor(),
      y = applicator_stain_positive,
      col = n_product_doses |> as.factor()
  )
  ) +
  geom_point() +
  geom_jitter(width = 0.2, height = 0.2) + 
  labs(x = "Number of study product doses", 
       y = "Number of applicator stained positive") + 
  guides(col = "none")


```

- Number of participants that self-reported using at least six dose (= XX) (85)
- Number of participants that had at least six positive staining (= YY) (61)

```{r}
applicator |> 
  filter(PP) |> 
  dplyr::count(n_product_doses) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    n_product_doses = "Number of study product taken"
  )
```


```{r}
applicator |> 
  filter(PP) |> 
  dplyr::count(applicator_stain_positive > 6) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() |> 
  cols_label(
    `applicator_stain_positive > 6` = "More than 6 applicator stained positive"
  )
```


+ contingency table of self-reported doses and positive staining (ok)

- Proportion of participants self-reported using at least six dose **and** have at least six positive staining  (= ZZ/XX) (=59)

```{r}
applicator |>
  filter(PP) |> 
  dplyr::count((applicator_stain_positive > 6&n_product_doses>6)) |> 
  mutate(prop = round(n / sum(n), 3)) |> 
  gt() 
```


### 08/08 Time since last dose in 7-days active arms (LC-106-7, LC-115)

Without filtering for last doses taken on the same day as the the v2

```{r}
#| eval: true

study_product <-
  mae@colData |>
  as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(
    exposures |> select(pid, visit_code, study_product),
  by = "pid"
  ) |>
  left_join(
    metadata(mae)$crf_data_clean$crf32 |>as_tibble(),
    by = (c("pid", "visit_code"))) |>
  dplyr::rename(
    study_day_product = study_day,
    visit_code_product = visit_code
  ) |> 
  select(-vaginal_swab_collection_time)


# study_day visit 2 in person
# ! pid 068100026 appear 2 times ! -> remove using filter(!is.na(study_day_visit2))
visit2_studyday <- 
  metadata(mae)$visits_crfs_merged |> 
  as_tibble() |> 
  select(pid, visit_code, study_day) |> 
  distinct() |> 
  filter(visit_code == "1200") |> 
  dplyr::rename(
    study_day_v2 = study_day
  ) |> 
  dplyr::filter(!is.na(study_day_v2))
  
study_prod_time <- 
  study_product |> 
  filter(arm != "Pl") |> 
  left_join(visit2_studyday |> select(-visit_code), by = "pid") |> 
  group_by(pid) |> 
  filter(study_product =="1") |> 
  filter(study_day_product <= study_day_v2) |>  # only consider doses taken before v2
  arrange(study_day_product) |> 
  slice_tail(n = 1) |>              
  ungroup() 

# create category 
study_prod_time <- 
  study_prod_time |> 
  mutate(last_dose = case_when(
    study_day_product == study_day_v2 ~ "same day", 
    study_day_product == study_day_v2-1 ~ "day before", 
    study_day_product < study_day_v2-1~ "more than one day"
  ), 
  last_dose = factor(last_dose, levels = c("same day", "day before", "more than one day")))

```

Table

```{r}

study_prod_time |> 
  dplyr::count(last_dose) |> 
  gt()

```

```{r}

study_prod_time |> 
  group_by(site, arm, last_dose) |> 
  summarize(
    n = n(),  
    .groups = "drop"
  ) |> 
  ungroup() |> 
  pivot_wider(
    id_cols = c(site, last_dose), 
    names_from = arm,
    values_from = n, values_fill = 0
  ) |> 
  group_by(site) |> 
  gt()
```

### 08/08 Time since last dose in 7-days active arms (LC-106-7, LC-115)

We compute this time based on self-reported time of last study product use (daily - CRF plate 32/33) -\> date/time of last study product = use the crf 32/33 `visit_day` + answer to when? (early morning, etc.) -\> swab time = use `study_day` of the weekly visit.

To compute the time between the last dose taken prior to the in-person visit at week 2, we use information from three sources: crf32 for the time of insertion of the study product, the exposure table for the date of the last dose, and the visits_crfs_merged table for the study day of the week 2 in-person visit.

To better estimate this time interval, we combine the `study_day` (which reflects the calendar day of product use) with `insertion_study_product_time` to account for the time of day the product was inserted. Specifically, we convert the reported insertion window into a fractional day value and add it to the study day, as follows:

-   Before 6am: 0.125
-   Early morning (6â€“9am): 0.25
-   Late morning (9â€“12pm): 0.4375
-   Early afternoon (12â€“3pm): 0.5625
-   Late afternoon (3â€“6pm): 0.6875
-   Evening (6â€“9pm): 0.8125
-   Late evening (9pmâ€“midnight): 0.9375

For the week 2 in-person visit, we also assume it occurred during the day (rather than at midnight), so we add 0.5 to the visit's study_day to reflect a likely early afternoon visit time.

```{r}
#| eval: true

study_product <-
  mae@colData |>
  as_tibble() |>
  select(pid, site, randomized, arm, ITT, mITT, PP) |>
  distinct() |>
  filter(randomized, mITT) |>
  left_join(
    exposures |> select(pid, visit_code, study_product),
  by = "pid"
  ) |>
  left_join(
    metadata(mae)$crf_data_clean$crf32 |>as_tibble(),
    by = (c("pid", "visit_code"))) |>
  dplyr::rename(
    study_day_product = study_day,
    visit_code_product = visit_code
  ) |>
  mutate(
    study_day_product_frac =
      dplyr::case_when(
        insert_study_product_time == "Before 6am" ~ study_day_product + 0.125,
        insert_study_product_time == "Early morning (6am-9am)" ~ study_day_product + 0.3125,
        insert_study_product_time == "Late morning (9am-12pm)" ~ study_day_product + 0.4375,
        insert_study_product_time == "Early afternoon (12pm-3pm)" ~ study_day_product + 0.5625,
        insert_study_product_time == "Late afternoon (3pm-6pm)" ~ study_day_product + 0.6875,
        insert_study_product_time == "Evening (6pm-9pm)" ~ study_day_product + 0.8125,
        insert_study_product_time == "Late evening (9pm-midnight)" ~ study_day_product + 0.9375,
        TRUE ~ study_day_product
           )
    )


# study_day visit 2 in person
# ! pid 068100026 appear 2 times ! -> remove using filter(!is.na(study_day_visit2))
visit2_studyday <- 
  metadata(mae)$visits_crfs_merged |> 
  as_tibble() |> 
  select(pid, visit_code, study_day) |> 
  distinct() |> 
  filter(visit_code == "1200") |> 
  dplyr::rename(
    study_day_v2 = study_day
  ) |> 
  dplyr::filter(!is.na(study_day_v2)) |> 
  mutate(
    study_day_v2 = study_day_v2 + 0.5 # this assumes that the visit happened at noon (We don't think we have data/information about the time of visit)
  )

study_prod_time <- 
  study_product |> 
  left_join(visit2_studyday |> select(-visit_code), by = "pid") |> 
  group_by(pid) |> 
  filter(study_product =="1") |> 
  filter(study_day_product_frac <= study_day_v2) |>  # we only consider doses that were taken before the visit 2
  arrange(study_day_product_frac) |> 
  slice_tail(n = 1) |>              
  ungroup() 


# filter for participant in LC-106-7 and LC-115 and compute the difference in time
study_prod_time <- 
  study_prod_time |> 
  filter(arm %in% c("LC-106-7", "LC-115")) |> 
  mutate(
    time_between_final_dose_and_v2 = study_day_v2 - study_day_product_frac
  )

```

```{r}
#| eval: true

# mean and CI of time_between_final_dose_and_visit2 by arm
study_prod_time |> 
  group_by(arm) |> 
  summarise(
    mean_time = mean(time_between_final_dose_and_v2, na.rm = TRUE),
    mean_hours = mean_time * 24, # convert to hours
    median_time = median(time_between_final_dose_and_v2, na.rm = TRUE),
    median_hours = median_time * 24, # convert to hours
    sd_time = sd(time_between_final_dose_and_v2, na.rm = TRUE),
    sd_hours = sd_time * 24, # convert to hours
    n = n(),
    CI = list(DescTools::MeanCI(time_between_final_dose_and_v2, conf.level = 0.95, na.rm = TRUE))
  ) |> 
  mutate(
    CI_text = str_c("(", round(map_dbl(CI, ~ .x[2]), 2), "-", round(map_dbl(CI, ~ .x[3]), 2), ")"),
    CI_hours = str_c("(", round(map_dbl(CI, ~ .x[2] * 24), 2), "-", round(map_dbl(CI, ~ .x[3] * 24), 2), ")")
  ) |>
  select(arm,n, median_hours, mean_hours, sd_hours, CI_hours) |> 
  gt() |> 
  gt::cols_label(
    arm = "Arm",
    n = "N mITT participants",
    median_hours = "Median time between final dose and visit 2 (hours)",
    mean_hours = "Mean time between final dose and visit 2 (hours)",
    sd_hours = "Standard deviation (hours)",
    CI_hours = "95% CI (hours)"
  )

```

```{r}
#| fig-height: 6
#| fig-width: 8

study_prod_time |> 
  ggplot() + 
  aes(x = time_between_final_dose_and_v2 * 24, y = pid) +
  geom_point() + 
  geom_vline(xintercept = c(24, 48, 72, 96), linetype = "dashed", color = "steelblue") +
  scale_x_continuous(
    breaks = seq(0, 24 * 4, by = 12),  
    name = "Time between final dose and visit 2 (hours)"
  ) +
  facet_grid(site + arm ~ ., scales = "free_y", space = "free_y")

```
