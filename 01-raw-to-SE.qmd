---
title: "From raw data to SE objects"
author: Laura Symul
format: 
   html:
     page-layout: full
     code-fold: true
     toc: true
     toc-location: left
     toc-depth: 5
     embed-resources: true
execute:
  cache: true
  warning: false
knitr:
  opts_chunk:
    out.width: "100%"
editor: source
---

In this section, we load the raw data from their original files (*i.e.,* the data/files as generated by the corresponding labs or teams) and transform each assay into a `SummarizedExperiment` object.
This will enable to then collect them into a single `MultiAssayExperiment` object and perform the integrative analyses.

To link the assays together,we define a common unique identifier for each `participant x visit`.
This unique identifier (`.sample`) is the concatenation of the `pid` (participant ID) and the `visit_code`.

### Clinical and survey (CRF) data

#### Information about the data

The data acquisition process is described XXXHEREXXXX.

The data encoding in a xxx database and quality control processes are described XXXHEREXXX.

The data was exported from the database by Lara Lewis (CAPRISA, South Africa) as a set of xxx files.

Lara Wautier (UCLouvain, Belgium) then imported these files in `R` and assembled the data into two tables: a `participants` and a `visits` table. The code is available XXXHEREXXX.

The `participants` table contains participant-invariant information such as the participant ID, the treatment arm, site, and study population (ITT, mITT, PP). 
The `visits` table contains participant-varying information collected at each visit.

The columns necessary for the primary trial analyses were then selected from these two and exported into two files: `participants.RDS` and `visits.RDS`, which we load below.


#### Loading the data

We load the `participant` and `visits` data, and create 

- one table which will become the MAE's colData
- one `SE` object which provides attendance information at each visit (this also ensures that the `MAE` object has data for all visits, which is useful for downstream analyses)

```{r}

participants <- readRDS(file = str_c(data_dir(), "00 clinical data/participants.RDS"))
visits <- readRDS(file = str_c(data_dir(), "00 clinical data/visits.RDS"))

clin <- 
  participants |> left_join(visits, by = join_by(pid)) |> 
  mutate(sampleID = str_c(pid, "_", visit_code), rownames = sampleID) |> 
  dplyr::select(sampleID, everything()) 

mae_coldata <- 
  clin |> 
  as.data.frame() |> 
  column_to_rownames(var = "rownames")

```


```{r}

make_se_clin <- function(clin, cols, assayname){
  assay <- 
    clin |> 
    dplyr::select(sampleID, all_of(cols)) |> 
    as.data.frame() |> 
    column_to_rownames("sampleID") |> 
    t()
  
  assay_list <- list()
  assay_list[[assayname]] <- assay
  
  SummarizedExperiment::SummarizedExperiment(
    assays = assay_list
  )
  
}

```

```{r}

# Directly included in data simulation 

# clin <- clin |> mutate(planned = TRUE, attended = ifelse(str_detect(visit_name, "Daily"), NA, attended)) #TRUE

```

```{r}

se_va <- make_se_clin(clin, cols = c("planned", "attended"), assayname = "visit_attendance")

```


### Weekly metagenomics data with LBP strains relative abundances

> TODO: add information about how the data was generated (summary of the methods)

We load the weekly metagenomics data, the manifest for the metagenomic barcodes, and the strain information.


```{r}

# if simulated data

mg <- read_csv(str_c(data_dir(), "01 metagenomics kSanity/mg_kSanity.csv"))
mg_combined <- read_csv(str_c(data_dir(), "03 metagenomics combined/mg_combined.csv"))
mg_manifest <- read_csv(str_c(data_dir(), "01 metagenomics kSanity/mg_kSanity_manifest.csv"))

# if real data 

# mg <- read_csv(str_c(data_dir("real"), "MVIBR_kSanityVIRGO2_ReadCounts_20250404.csv"))
# mg_combined <- read_csv(str_c(data_dir("real"), "MVIBR_kSanityVIRGO2_relAbund_20250404.csv"))
# 
# # Create a fake manifest (waiting the real one)
# mg_manifest <- 
#   mg |>
#   mutate(
#     visit_code_temp = substr(sampleID, 4, nchar(sampleID) - 2 ),
#     visit_code = substr(visit_code_temp, 1, 3) |> as.factor(),
#     pid = substr(sampleID, nchar(sampleID) - 1, nchar(sampleID)) |> as.factor(),
#   ) |> 
#   select(sampleID, pid, visit_code)

# strain info 
LBP_strain_info <- readxl::read_xlsx(str_c(dropbox_dir(), "9_VIBRANT_Study Product/IsolateNumbers.xlsx"))

LBP_strain_info <- 
 LBP_strain_info |> 
  mutate(strain_id = `VMRC ID`, 
         LBP = ifelse(is.na(LC106), "LC-115", "LC-106 & LC-115") |> factor(), 
         strain_origin = `Geographic source` |> factor()
  ) |> 
  dplyr::rename(Biose_ID = `Biose ID`, VMRC_ID = `VMRC ID`) |> 
  arrange(strain_origin, LBP) |> 
  mutate(strain_id = strain_id |> fct_inorder()) |> 
  dplyr::select(strain_id, LBP, strain_origin, contains("ID"))

LBP_strain_info |>   # gt(caption = "LBP strain information")
  set_variable_labels(
    strain_id = "Strain ID", 
    strain_origin = "Strain origin", 
    Biose_ID = "Biose ID", 
    VMRC_ID = "VMRC ID"
  ) |> 
  gt(caption = "LBP strain information") |> 
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_column_labels())

```

```{r}

mg_to_SE <- function(mg,mg_combined, mg_manifest, LBP_strain_info, clin){

  mg_manifest <-
    mg_manifest |>
    mutate(sampleID = str_c(pid, "_", visit_code))
  
  if (any(duplicated(mg_manifest$sampleID))) stop("Duplicated `uid` in `mg_manifest`")
  
  mg <- mg |> left_join(mg_manifest, by = join_by(barcode))
  mg_combined <- mg_combined |> left_join(mg_manifest, by = join_by(barcode)) 
  
  tmp <- mg |> dplyr::select(barcode, sampleID) |> distinct()
  if (any(duplicated(tmp$sampleID))) stop("Duplicated `uid` in `mg`")
  
  # create assays
  assay_prop_of_Lc <- 
    mg |> 
    dplyr::select(sampleID, everything()) |> #sample_id
    dplyr::select(-c(barcode, pid, visit_code)) |>
    as.data.frame() |> 
    column_to_rownames("sampleID") |> #sample_id 
    t() 

  assay_unique_kmers <- 
    mg_combined |> 
    dplyr::select(sampleID, all_of(LBP_strain_info$strain_id)) |> #sample_id # `Lactobacillus crispatus` 
    as.data.frame() |>
    column_to_rownames("sampleID") |> #sampleID
    t()

  se_coldata <-
    mg |>
    dplyr::select(sampleID, barcode) |> #shared_kmers
    distinct() |>
    as.data.frame()

  se_rowdata <- 
    mg |> 
    dplyr::select(-c(barcode, pid, visit_code, sampleID)) |>
    colnames() |> 
    as.data.frame() |> 
    setNames("strain") |> 
    distinct() |> 
    left_join(
      LBP_strain_info,
      by = join_by(strain == strain_id)
    ) 
  
  # Harmonization of the order of samples and feature
  
  sorted_sample_ids <- sort(as.character(se_coldata$sampleID))
  assay_prop_of_Lc <- assay_prop_of_Lc[, sorted_sample_ids]
  assay_unique_kmers <- assay_unique_kmers[, sorted_sample_ids]
  se_coldata <- se_coldata[match(sorted_sample_ids, se_coldata$sampleID), ]

  sorted_strains <- assay_prop_of_Lc |> rownames() # sort(as.character(se_rowdata$strain))
  assay_prop_of_Lc <- assay_prop_of_Lc[sorted_strains, ]
  assay_unique_kmers <- assay_unique_kmers[sorted_strains, ]
  se_rowdata <- se_rowdata[match(sorted_strains, se_rowdata$strain), ]

  SummarizedExperiment::SummarizedExperiment(
    assays = list(prop_of_Lc = assay_prop_of_Lc, unique_kmers = assay_unique_kmers),
    rowData = se_rowdata,
    colData = se_coldata
  )
}


```


```{r}

(se_mg <- mg_to_SE(mg,mg_combined,mg_manifest, LBP_strain_info, clin))

```

#### Checks & Quality Controls

**Total unique kmers per sample**


```{r}
#| fig-height: 3
#| fig-width: 5

se_mg |> 
  as_tibble() |> 
  mutate(unique_kmers = as.numeric(unique_kmers)) |>
  group_by(.sample) |> 
  summarize(total_unique_kmers = sum(unique_kmers)) |> 
  ggplot(aes(x = total_unique_kmers)) +
  geom_histogram() +
  scale_x_log10()

```

**Data overview**

```{r}
#| fig-height: 8
#| fig-width: 8

se_mg |> 
  as_tibble() |> 
  mutate(.feature = .feature |> fct_inorder(),
         prop_of_Lc = as.numeric(prop_of_Lc)) |> 
  ggplot(aes(x = .feature, y = .sample, fill = prop_of_Lc)) +
  geom_tile() +
  scale_fill_continuous(low = "white", high = "steelblue2") +
  scale_x_discrete("Strains") +
  scale_y_discrete("Samples",breaks = NULL) +
  facet_grid(. ~ LBP + strain_origin, scales = "free_x", space = "free") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```

### Weekly metagenomics - VIRGO2 

Results of the metagenomics VIRGO2 is stored in a combined file with kSanity *kSanityVirogo2_combined_output.csv*. 

```{r}

mgVirgo_to_SE <- function(mg_combined, mg_manifest, LBP_strain_info, clin){
  mg_manifest <- 
    mg_manifest |> 
    mutate(sampleID = str_c(pid, "_", visit_code)) 
  
  if (any(duplicated(mg_manifest$sampleID))) stop("Duplicated `uid` in `mg_manifest`")
  
  mg_combined <- mg_combined |> left_join(mg_manifest, by = join_by(barcode))
  
  tmp <- mg_combined |> dplyr::select(barcode, sampleID) |> distinct()
  if (any(duplicated(tmp$sampleID))) stop("Duplicated `uid` in `mg_combined`")
  
  # create assays
  assay <- 
    mg_combined |> 
    dplyr::select(sampleID, !all_of(LBP_strain_info$strain_id), -c(barcode, visit_code, pid, total_reads)) |> 
    as.data.frame() |>
    column_to_rownames("sampleID") |>
    t()
  
  # Relative abundance 
  rel <- t(t(assay) / colSums(assay, na.rm = TRUE)) %>% as.data.frame()

  se_coldata <-
    mg_combined |>
    dplyr::select(sampleID, barcode, total_reads) |> 
    distinct() |>
    as.data.frame()

  se_rowdata <-
    mg_combined |>
    dplyr::select(-c(
      barcode,
      pid,
      visit_code,
      sampleID,
      total_reads,
      all_of(LBP_strain_info$strain_id)
    )) |>
    colnames() |>
    as.data.frame() |>
    setNames("strain") |>
    distinct() |>
    left_join(LBP_strain_info, by = join_by(strain == strain_id)) 
  
  # Harmonization of the order of samples and feature
  
  sorted_sample_ids <- sort(as.character(se_coldata$sampleID))
  assay <- assay[, sorted_sample_ids]
  rel <- rel[, sorted_sample_ids]
  se_coldata <- se_coldata[match(sorted_sample_ids, se_coldata$sampleID), ]

  sorted_strains <- assay |> rownames() 
  assay <- assay[sorted_strains, ]
  rel <- rel[sorted_strains, ]
  se_rowdata <- se_rowdata[match(sorted_strains, se_rowdata$strain), ]

  SummarizedExperiment::SummarizedExperiment(
    assays = list(virgo2_reads = assay, virgo2_prop = rel),
    rowData = se_rowdata,
    colData = se_coldata
  )
}


```


```{r}

se_mg_Virgo2 <- mgVirgo_to_SE(mg_combined, mg_manifest, LBP_strain_info, clin)

```

#### Checks & Quality Controls

```{r}

se_mg_Virgo2 |> 
  as_tibble() |> 
  mutate(virgo2 = as.numeric(virgo2_reads)) |>
  group_by(.sample) |> 
  summarize(total_reads = sum(virgo2_reads)) |> 
  ggplot(aes(x = total_reads)) +
  geom_histogram() +
  scale_x_log10()

```


### Weekly 16S rRNA data

> TODO: add a summary of the protocols and methods used to generate the 16S data

We load the 16S rRNA data, which is stored as a `phyloseq` object.

```{r}

(w16S <- readRDS(str_c(data_dir(), "03 weekly 16S/w16S.RDS")))

```

We transform the `phyloseq` object into a `SummarizedExperiment` object.

```{r}

phyloseq_to_SE <- function(physeq){
  
  sample_info <- 
    physeq@sam_data |>
    as.data.frame() |> 
    set_class("data.frame") |> 
    rownames_to_column("barcode") |> 
    as_tibble() |> 
    mutate(sampleID = str_c(pid, "_", visit_code))

  counts <- physeq@otu_table |> as.data.frame() |> set_class("data.frame")
  if (!phyloseq::taxa_are_rows(physeq)) counts <- counts |> t()
  counts <- counts |> set_colnames(sample_info$sampleID)
  rel <- t(t(counts)/colSums(counts)) |> as.data.frame()
  
  SummarizedExperiment::SummarizedExperiment(
    assays = list(ASV_counts = counts, ASV_prop = rel),
    rowData = physeq@tax_table |> as.data.frame() |> set_class("data.frame"),
    colData = sample_info |> as.data.frame() |> column_to_rownames("sampleID")
  )
}

```

```{r}

(se_16S <- phyloseq_to_SE(w16S))

```


#### Checks & Quality Controls

**16S Total reads per sample**

```{r}
#| fig-height: 3
#| fig-width: 5

se_16S |> 
  as_tibble() |> 
  group_by(.sample) |> summarize(total_counts = sum(ASV_counts)) |> 
  ggplot(aes(x = total_counts)) +
  geom_histogram() +
  scale_x_log10()

```


**Data overview**

```{r}
#| fig-height: 10
#| fig-width: 12

se_16S |> 
  as_tibble() |> 
  group_by(.feature) |> mutate(total_prop = sum(ASV_prop)) |> ungroup() |> 
  arrange(-total_prop) |> mutate(.feature = .feature |> fct_inorder()) |> 
  ggplot(aes(x = .feature, y = .sample, fill = asinh(ASV_counts))) +
  geom_tile() +
  scale_fill_continuous(low = "white", high = "steelblue2") +
  scale_x_discrete("ASVs", breaks = NULL) +
  scale_y_discrete("Samples",breaks = NULL) 

```








