---
title: "From raw data to SE objects"
author: Laura Symul
format: 
   html:
     page-layout: full
     code-fold: true
     toc: true
     toc-location: left
     toc-depth: 5
     embed-resources: true
execute:
  cache: true
  warning: false
knitr:
  opts_chunk:
    out.width: "100%"
editor: source
---

In this section, we load the raw data from their original files (*i.e.,* the data/files as generated by the corresponding labs or teams) and transform each assay into a `SummarizedExperiment` object.
This will enable to then collect them into a single `MultiAssayExperiment` object and perform the integrative analyses.

To link the assays together,we define a common unique identifier for each `participant x visit`.
This unique identifier (`.sample`) is the concatenation of the `pid` (participant ID) and the `visit_code`.

### Clinical and survey (CRF) data

#### Information about the data

The data acquisition process is described XXXHEREXXXX.

The data encoding in a xxx database and quality control processes are described XXXHEREXXX.

The data was exported from the database by Lara Lewis (CAPRISA, South Africa) as a set of xxx files.

Lara Wautier (UCLouvain, Belgium) then imported these files in `R` and assembled the data into two tables: a `participants` and a `visits` table. The code is available XXXHEREXXX.

The `participants` table contains participant-invariant information such as the participant ID, the treatment arm, site, and study population (ITT, mITT, PP). 
The `visits` table contains participant-varying information collected at each visit.

The columns necessary for the primary trial analyses were then selected from these two and exported into two files: `participants.RDS` and `visits.RDS`, which we load below.


#### Loading the data

We load the `participant` and `visits` data, and create 

- one table which will become the MAE's colData
- one `SE` object which provides attendance information at each visit (this also ensures that the `MAE` object has data for all visits, which is useful for downstream analyses)

```{r}

participants <- readRDS(file = str_c(data_dir(), "00 clinical data/participants.RDS"))
visits <- readRDS(file = str_c(data_dir(), "00 clinical data/visits.RDS"))

clin <- 
   participants |> left_join(visits, by = join_by(pid)) |> 
  mutate(sample_id = str_c(pid, "_", visit_code), rownames = sample_id) |> 
  select(sample_id, everything()) 

mae_coldata <- 
  clin |> 
  as.data.frame() |> 
  column_to_rownames(var = "rownames")

```


```{r}

make_se_clin <- function(clin, cols, assayname){
  assay <- 
    clin |> 
    select(sample_id, all_of(cols)) |> 
    as.data.frame() |> 
    column_to_rownames("sample_id") |> 
    t()
  
  assay_list <- list()
  assay_list[[assayname]] <- assay
  
  SummarizedExperiment::SummarizedExperiment(
    assays = assay_list
  )
  
}

```

```{r}

clin <- clin |> mutate(planned = TRUE, attended = ifelse(str_detect(visit_name, "Daily"), NA, TRUE))

```

```{r}

se_va <- make_se_clin(clin, cols = c("planned", "attended"), assayname = "visit_attendance")

```


### Weekly metagenomics data with LBP strains relative abundances

> TODO: add information about how the data was generated (summary of the methods)

We load the weekly metagenomics data, the manifest for the metagenomic barcodes, and the strain information.


```{r}

mg <- read_csv(str_c(data_dir(), "01 metagenomics/mg.csv"))
mg_manifest <- read_csv(str_c(data_dir(), "01 metagenomics/mg_manifest.csv"))
LBP_strain_info <- readxl::read_xlsx(str_c(dropbox_dir(), "9_VIBRANT_Study Product/IsolateNumbers.xlsx"))

LBP_strain_info <- 
 LBP_strain_info |> 
  mutate(strain_id = `VMRC ID`, 
         LBP = ifelse(is.na(LC106), "LC-106 & LC-115", "LC-106") |> factor(), 
         strain_origin = `Geographic source` |> factor()
  ) |> 
  dplyr::rename(Biose_ID = `Biose ID`, VMRC_ID = `VMRC ID`) |> 
  arrange(strain_origin, LBP) |> 
  mutate(strain_id = strain_id |> fct_inorder()) |> 
  select(strain_id, LBP, strain_origin, contains("ID"))

LBP_strain_info |> gt(caption = "LBP strain information")

```

```{r}

mg_to_SE <- function(mg, mg_manifest, LBP_strain_info){
  mg_manifest <- 
    mg_manifest |> 
    mutate(sample_id = str_c(pid, "_", visit_code))
  
  if (any(duplicated(mg_manifest$sample_id))) stop("Duplicated `uid` in `mg_manifest`")
  
  mg <- mg |> left_join(mg_manifest, by = join_by(barcode))
  tmp <- mg |> select(barcode, sample_id) |> distinct()
  if (any(duplicated(tmp$sample_id))) stop("Duplicated `uid` in `mg`")
  
  assay_prop_of_Lc <- 
    mg |> 
    select(sample_id, strain, prop_of_Lc) |> 
    pivot_wider(names_from = sample_id, values_from = prop_of_Lc) |> 
    as.data.frame() |> 
    column_to_rownames("strain") 
    
  assay_unique_kmers <- 
    mg |> 
    select(sample_id, strain, unique_kmers) |> 
    pivot_wider(names_from = sample_id, values_from = unique_kmers) |> 
    as.data.frame() |> 
    column_to_rownames("strain")
  
  se_coldata <- 
    mg |> 
    select(sample_id, barcode, shared_kmers) |> 
    distinct() |> 
    as.data.frame() 
  
  se_rowdata <- 
    mg |> 
    select(strain) |> 
    distinct() |> 
    left_join(
      LBP_strain_info,
      by = join_by(strain == strain_id)
    ) 
  
  SummarizedExperiment::SummarizedExperiment(
    assays = list(prop_of_Lc = assay_prop_of_Lc, unique_kmers = assay_unique_kmers),
    rowData = se_rowdata,
    colData = se_coldata
  )
}


```

```{r}

(se_mg <- mg_to_SE(mg, mg_manifest, LBP_strain_info))

```

#### Checks & Quality Controls

**Total unique kmers per sample**


```{r}
#| fig-height: 3
#| fig-width: 5

se_mg |> 
  as_tibble() |> 
  group_by(.sample) |> summarize(total_unique_kmers = sum(unique_kmers)) |> 
  ggplot(aes(x = total_unique_kmers)) +
  geom_histogram() +
  scale_x_log10()

```

**Data overview**

```{r}
#| fig-height: 8
#| fig-width: 8

se_mg |> 
  as_tibble() |> 
  mutate(.feature = .feature |> fct_inorder()) |> 
  ggplot(aes(x = .feature, y = .sample, fill = prop_of_Lc)) +
  geom_tile() +
  scale_fill_continuous(low = "white", high = "steelblue2") +
  scale_x_discrete("Strains") +
  scale_y_discrete("Samples",breaks = NULL) +
  facet_grid(. ~ LBP + strain_origin, scales = "free_x", space = "free") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```



### Weekly 16S rRNA data

> TODO: add a summary of the protocols and methods used to generate the 16S data

We load the 16S rRNA data, which is stored as a `phyloseq` object.

```{r}

(w16S <- readRDS(str_c(data_dir(), "02 weekly 16S/w16S.RDS")))

```

We transform the `phyloseq` object into a `SummarizedExperiment` object.

```{r}

phyloseq_to_SE <- function(physeq){
  
  sample_info <- 
    physeq@sam_data |>
    as.data.frame() |> 
    set_class("data.frame") |> 
    rownames_to_column("barcode") |> 
    as_tibble() |> 
    mutate(sample_id = str_c(pid, "_", visit_code))

  counts <- physeq@otu_table |> as.data.frame() |> set_class("data.frame")
  if (!phyloseq::taxa_are_rows(physeq)) counts <- counts |> t()
  counts <- counts |> set_colnames(sample_info$sample_id)
  rel <- t(t(counts)/colSums(counts)) |> as.data.frame()
  
  SummarizedExperiment::SummarizedExperiment(
    assays = list(ASV_counts = counts, ASV_prop = rel),
    rowData = physeq@tax_table |> as.data.frame() |> set_class("data.frame"),
    colData = sample_info |> as.data.frame() |> column_to_rownames("sample_id")
  )
}

```

```{r}

(se_16S <- phyloseq_to_SE(w16S))

```






#### Checks & Quality Controls


**Total reads per sample**

```{r}
#| fig-height: 3
#| fig-width: 5

se_16S |> 
  as_tibble() |> 
  group_by(.sample) |> summarize(total_counts = sum(ASV_counts)) |> 
  ggplot(aes(x = total_counts)) +
  geom_histogram() +
  scale_x_log10()

```


**Data overview**

```{r}
#| fig-height: 10
#| fig-width: 12

se_16S |> 
  as_tibble() |> 
  group_by(.feature) |> mutate(total_prop = sum(ASV_prop)) |> ungroup() |> 
  arrange(-total_prop) |> mutate(.feature = .feature |> fct_inorder()) |> 
  ggplot(aes(x = .feature, y = .sample, fill = asinh(ASV_counts))) +
  geom_tile() +
  scale_fill_continuous(low = "white", high = "steelblue2") +
  scale_x_discrete("ASVs", breaks = NULL) +
  scale_y_discrete("Samples",breaks = NULL) 

```








