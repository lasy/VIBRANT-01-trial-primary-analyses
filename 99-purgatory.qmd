---
title: "Purgatory"
author: Laura Symul & Laura Vermeren
format: 
   html:
     page-layout: full
     code-fold: true
     toc: true
     toc-location: left
     toc-depth: 5
     embed-resources: true
execute:
  cache: true
  warning: false
knitr:
  opts_chunk:
    out.width: "100%"
editor: source
---

```{r}
 |> 
  mutate(
    arm = 
      case_when(
        (group4 == "Yes") ~ "LC-106-o",
        (location == "US") ~ sample(c("Pl", "LC-106-7", "LC-115"), n(), replace = TRUE),
        (location == "SA") ~ sample(c("Pl", "LC-106-7", "LC-106-3", "LC-115"), n(), replace = TRUE),
        TRUE ~ "Blinded"
      ) |> 
      factor(levels = c("Pl", "LC-106-7", "LC-106-3", "LC-106-o", "LC-115", "Blinded"))
  )
```


##  Primary outcomes

```{r}
#simulation
col_by_week5 <- 
  expand_grid(
    site = c("MGH", "CAP") |> factor(),
    arm = c("Pl", "LC-106-7", "LC-106-3", "LC-106-o", "LC-115") |> fct_inorder(),
    pid = 1:10
  ) |> 
  slice_sample(prop = 0.9) |> 
  mutate(
    p = 0.0 + c(0, 0.5, 0.4, 0.7, 0.6)[arm |> as.integer()],
    colonized_by = (rbinom(n(), 1, p) == 1)
  )

col_by_week5 <- 
  col_by_week5 |> 
  mutate(out = (site == "MGH") & (arm %in% c("LC-106-3", "LC-106-o")) & (pid > 4)) |>
  filter(!out)

```


```{r}

col_by_week5 <-
  colonization |>
  left_join(colData(mae) |> as_tibble()) |>
  filter(visit_code == 1500)

  

```


# Datadir 

## 09.04.2025

```{r}
data_dir <- function(data_source = c("simulated", "real")){
  
  user_path <- 
    if (str_detect(getwd(), "laurasymul")) {
    "/Users/laurasymul/OneDrive - UCL/Academia/Research/VIBRANT data UCLouvain/"
  } else if (str_detect(getwd(), "vermeren")) {
    "/Users/lvermeren/OneDrive - UCL/VIBRANT data UCLouvain/"
  } else {
    stop("You need to specify the path to the data directory in `R/data_dir.R`")
  }
  
  if (data_source == "simulated") {
    data_dir <- str_c(user_path, "simulated data/")
    data_dir <- fs::dir_ls(data_dir) |> sort(decreasing = TRUE) |> magrittr::extract(1) |> str_c("/")
  } else if (data_source == "real") {
    data_dir <- str_c(user_path, "real data/")
    data_dir <- fs::dir_ls(data_dir) |> sort(decreasing = TRUE) |> magrittr::extract(1) |> str_c("/")
  }
}
```


# 01-raw-to-SE

## 10.04.2025

No need of adding NA rows for missing sample (due to missing visits) in the creation of SE

```{r}

  # Add NA lines for missing samples
  # all_sample_ids <- 
  #   clin |> 
  #   filter(!str_detect(visit_name, "Daily"), visit_abbr != "ST", day >= 0) |>  
  #   select(sampleID) |> 
  #   distinct() |> 
  #   pull()
  # 
  # mg <- 
  #   mg |>   
  #   tidyr::complete(sampleID = all_sample_ids) 
  # 
  # mg_combined <- 
  #   mg_combined |>  
  #   complete(sampleID = all_sample_ids) 

```


Creation of fake manifest for real data : checking the creation logic

```{r}
prefix <- substr(mg$sampleID, 1, nchar(mg$sampleID) - 2)
identical_samples <- split(mg$sampleID, prefix)
identical_samples
```


## 03.04.2025

Change in the function mg_to_SE : 
-   Add rows for samples of missed visits (need informations in "clin" database)

```{r}
mg_to_SE <- function(mg,mg_combined, mg_manifest, LBP_strain_info){
  mg_manifest <- 
    mg_manifest |> 
    mutate(sample_id = str_c(pid, "_", visit_code)) 
  
  if (any(duplicated(mg_manifest$sample_id))) stop("Duplicated `uid` in `mg_manifest`")
  
  # mg <- mg |> filter(!is.na(`Lactobacillus crispatus`)) 
  mg <- mg |> left_join(mg_manifest, by = join_by(barcode))
  # mg_combined <- mg_combined |> filter(!is.na(`Lactobacillus crispatus`))
  mg_combined <- mg_combined |> left_join(mg_manifest, by = join_by(barcode))
  tmp <- mg |> dplyr::select(barcode, sample_id) |> distinct()
  if (any(duplicated(tmp$sample_id))) stop("Duplicated `uid` in `mg`")
  
  assay_prop_of_Lc <- 
    mg |> 
    # dplyr::select(sample_id, strain, prop_of_Lc) |> 
    # pivot_wider(names_from = sample_id, values_from = prop_of_Lc, values_fill = 0) |>  # the new database is already in wide format 
    dplyr::select(sample_id, everything()) |> 
    dplyr::select(-c(pid, visit_code, barcode)) |> 
    as.data.frame() |> 
    column_to_rownames("sample_id") |> 
    t() 
  # colnames(assay_prop_of_Lc) <- assay_prop_of_Lc[1, ]  
  # assay_prop_of_Lc <- assay_prop_of_Lc[-1, ]  
    
  assay_unique_kmers <- 
    mg_combined |> 
    # dplyr::select(sample_id, strain, unique_kmers) |> 
    # pivot_wider(names_from = sample_id, values_from = unique_kmers, values_fill = 0) |> 
    dplyr::select(sample_id, all_of(LBP_strain_info$strain_id), `Lactobacillus crispatus`) |> 
    as.data.frame() |>
    column_to_rownames("sample_id") |>
    t()

  se_coldata <-
    mg |>
    dplyr::select(sample_id, barcode) |> #shared_kmers
    distinct() |>
    as.data.frame()

  se_rowdata <- 
    mg |> 
    dplyr::select(-c(barcode, pid, visit_code, sample_id)) |> 
    colnames() |> 
    as.data.frame() |> 
    setNames("strain") |> 
    distinct() |> 
    left_join(
      LBP_strain_info,
      by = join_by(strain == strain_id)
    ) 
  
  
  # Harmonization of the order of samples and feature
  
  sorted_sample_ids <- sort(as.character(se_coldata$sample_id))
  assay_prop_of_Lc <- assay_prop_of_Lc[, sorted_sample_ids]
  assay_unique_kmers <- assay_unique_kmers[, sorted_sample_ids]
  se_coldata <- se_coldata[match(sorted_sample_ids, se_coldata$sample_id), ]

  sorted_strains <- assay_prop_of_Lc |> rownames() # sort(as.character(se_rowdata$strain))
  assay_prop_of_Lc <- assay_prop_of_Lc[sorted_strains, ]
  assay_unique_kmers <- assay_unique_kmers[sorted_strains, ]
  se_rowdata <- se_rowdata[match(sorted_strains, se_rowdata$strain), ]

  se_rowdata <- as(se_rowdata, "DataFrame")
  se_coldata <- as(se_coldata, "DataFrame")

  SummarizedExperiment::SummarizedExperiment(
    assays = list(prop_of_Lc = assay_prop_of_Lc, unique_kmers = assay_unique_kmers),
    rowData = se_rowdata,
    colData = se_coldata
  )
}


```

# 04-outcomes-definitions

## 04.04.2025

### LBP strains relative abundances in each samples

We replace "amlicon_ASV_all" by "mg-Virgo2" in the code below.

```{r}

se_LBP_rel_abundances <- 
  list(
    LBP_rel_ab = 
      mae[["mg_ksanity"]] |> 
      filter(!is.na(LBP)) |> 
      left_join(
        mae[["amplicon_ASV_all"]] |> 
          filter(str_detect(.feature, "crispatus")) |> 
          as_tibble() |> 
          dplyr::select(.sample, ASV_prop) |> 
          group_by(.sample) |> summarize(Lc_prop = sum(ASV_prop))
      ) |> 
      mutate(
        LBP_rel_ab = prop_of_Lc * Lc_prop
      ) |> 
      dplyr::select(-prop_of_Lc, -unique_kmers) 
  )


mae <- c(mae, se_LBP_rel_abundances)


```

# 05 Demographics

## 29.05.2025

Plots -> a refaire avec table1_data

### Graphics 

```{r}


ggplot(table1_data, aes(x = age, fill = site, col = site)) +
  geom_histogram(alpha = 0.5, position = "identity") +
  geom_density(lwd = 1.2,
               linetype = 2,
               colour = 2) +
    theme_classic() 
  
ggplot(table1_data, aes(x = gender_sexual_partners, fill = site)) +
    geom_bar(position = "dodge") +
    theme_classic() +
    scale_fill_manual(values = custom_colors) +
    theme(plot.title = element_text(hjust = 0.5),
          axis.text.x = element_text(angle = 90, hjust = 1)) +
    scale_x_discrete(labels = wrap_format(10)) +
    labs(x = str_wrap(var_label, width = 17), y="") 

```


```{r}

cat_vars <- 
  table1_data |>
  select(where(is.factor) | where(is.character), -Pid) |>
  names()

num_vars <- 
  table1_data |>
  select(where(is.numeric) | where(is.integer)) |>
  names()

plots <- list()

custom_colors <- c("VCRS" = "green4", "MGH" = "steelblue1")

for (var in cat_vars) {
  var_label <- var_label(table1_data[[var]])
  var_label <- ifelse(!is.null(var_label), var_label, var)
  
  p <- 
    ggplot(table1_data, aes_string(x = var, fill = "Site")) +
    geom_bar(position = "dodge") +
    theme_classic() +
    scale_fill_manual(values = custom_colors) +
    theme(plot.title = element_text(hjust = 0.5),
          axis.text.x = element_text(angle = 90, hjust = 1)) +
    scale_x_discrete(labels = wrap_format(10)) +
    labs(x = str_wrap(var_label, width = 17), y="") 
  
  #plots[[var]] <- p
  print(p)
}

for (var in num_vars) {
  var_label <- var_label(table1_data[[var]])
  var_label <- ifelse(!is.null(var_label), var_label, var)
  
  p <- 
    ggplot(table1_data, aes_string(x = var, fill = "Site", col = "Site")) +
    geom_histogram(alpha = 0.5, position = "identity") +
    # geom_density(lwd = 1.2,
    #            linetype = 2,
    #            colour = 2) +
    theme_classic() +
    scale_fill_manual(values = custom_colors) +  
    scale_color_manual(values = custom_colors) +  
    theme(plot.title = element_text(hjust = 0.5)) +
    labs(y = str_wrap(var_label, width = 17))  
  
  #plots[[var]] <- p
  print(p)
}


# ggarrange(plotlist = plots, ncol = 2, nrow = ceiling(length(plots)/2))

```


```{r}

p1 <- table1_data |> 
  ggplot(aes(x=Race))+ 
  geom_bar() + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  labs(y="") +
  facet_grid(Site~Arm) 

p2 <- table1_data |> 
  ggplot(aes(x=Food_insecurity))+ 
  geom_bar() + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  labs(y="", x = var_label(table1_data$Food_insecurity)) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 5))+
  facet_grid(Site~Arm)

p3 <- table1_data |> 
  ggplot(aes(x=Contraception))+ 
  geom_bar() + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  labs(y="") +
  facet_grid(Site~Arm)

p4 <- table1_data |> 
  ggplot(aes(x=Gender_sexual_partners))+ 
  geom_bar() + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  labs(y="", x = var_label(table1_data$Gender_sexual_partners)) +
  facet_grid(Site~Arm)

p5 <- table1_data |> 
  ggplot(aes(x=Sexual_partners_past_month))+ 
  geom_bar() + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  labs(y="", x = var_label(table1_data$Sexual_partners_past_month)) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 5))+
  facet_grid(Site~Arm)

p6 <- table1_data |> 
  ggplot(aes(x=Sexual_partners_lifetime))+ 
  geom_bar() + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  labs(y="", x = var_label(table1_data$Sexual_partners_lifetime)) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 5))+
  facet_grid(Site~Arm)

p7 <- table1_data |> 
  ggplot(aes(x=Dropout))+ 
  geom_bar() + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  labs(y="") +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 5))+
  facet_grid(Site~Arm) + 
  theme(
  axis.text.x = element_text(angle = 90, hjust = 1),
  plot.margin = margin(t = 5, r = 5, b = 30, l = 5)  # bas = 30 points
)

#ggarrange(p1, p2, p4, p5, p6, p7, p3, ncol=4, nrow=2) 
p1
p2
p3
p4
p5
p6
p7

```



## 09.04.2025

Ambitieux de metre tous les graphes sur une fenêtre unique

```{r}


cat_vars <- 
  participants_bis |>
  select(where(is.factor) | where(is.character), -Pid) |>
  names()

num_vars <- 
  participants_bis |>
  select(where(is.numeric) | where(is.integer)) |>
  names()

plots <- list()

custom_colors <- c("VCRS" = "green4", "MGH" = "steelblue1")

for (var in cat_vars) {
  var_label <- var_label(participants_bis[[var]])
  var_label <- ifelse(!is.null(var_label), var_label, var)
  
  p <- 
    ggplot(participants_bis, aes_string(x = var, fill = "Site")) +
    geom_bar(position = "dodge") +
    theme_classic() +
    scale_fill_manual(values = custom_colors) +
    theme(plot.title = element_text(hjust = 0.5),
          axis.text.x = element_text(angle = 90, hjust = 1)) +
    scale_x_discrete(labels = wrap_format(10)) +
    labs(x = str_wrap(var_label, width = 17), y="") 
  
  plots[[var]] <- p
}

for (var in num_vars) {
  var_label <- var_label(participants_bis[[var]])
  var_label <- ifelse(!is.null(var_label), var_label, var)
  
  p <- 
    ggplot(participants_bis, aes_string(x = var, fill = "Site", col = "Site")) +
    geom_histogram(alpha = 0.5, position = "identity") +
    geom_density(lwd = 1.2,
               linetype = 2,
               colour = 2) +
    theme_classic() +
    scale_color_manual(values = custom_colors) +  
    theme(plot.title = element_text(hjust = 0.5)) +
    labs(y = str_wrap(var_label, width = 17))  
  
  plots[[var]] <- p
}


ggarrange(plotlist = plots, ncol = 2, nrow = ceiling(length(plots)/2))


```

